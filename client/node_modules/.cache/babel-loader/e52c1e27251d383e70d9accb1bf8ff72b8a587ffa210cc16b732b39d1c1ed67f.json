{"ast":null,"code":"import { Chess } from 'chess.js';\nconst parsePGN = pgnText => {\n  const puzzles = [];\n  const games = pgnText.split('\\n\\n[Event');\n  games.forEach((game, index) => {\n    if (index === 0 && !game.startsWith('[Event')) {\n      game = '[Event' + game;\n    }\n\n    // Extraer FEN y solución\n    const fenMatch = game.match(/\\[FEN \"(.*?)\"\\]/);\n    const solutionMatch = game.match(/\\[Solution \"(.*?)\"\\]/);\n    if (fenMatch && solutionMatch) {\n      const fen = fenMatch[1];\n      const solution = solutionMatch[1].split(/\\d+\\.\\s+/).filter(move => move.trim()).flatMap(move => move.split(/\\s+/)).filter(move => move.trim());\n      puzzles.push({\n        id: index + 1,\n        fen: fen,\n        solution: solution,\n        turnToPlay: fen.includes(' w ') ? 'w' : 'b'\n      });\n    }\n  });\n  return puzzles;\n};\nexport const loadPuzzlesFromPGN = async () => {\n  try {\n    const pgnFile = await fetch('/data/puzzles/mate-in-two.pgn');\n    const pgnText = await pgnFile.text();\n    return parsePGN(pgnText);\n  } catch (error) {\n    console.error('Error loading puzzles:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["Chess","parsePGN","pgnText","puzzles","games","split","forEach","game","index","startsWith","fenMatch","match","solutionMatch","fen","solution","filter","move","trim","flatMap","push","id","turnToPlay","includes","loadPuzzlesFromPGN","pgnFile","fetch","text","error","console"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/services/puzzleService.js"],"sourcesContent":["import { Chess } from 'chess.js';\r\n\r\nconst parsePGN = (pgnText) => {\r\n  const puzzles = [];\r\n  const games = pgnText.split('\\n\\n[Event');\r\n  \r\n  games.forEach((game, index) => {\r\n    if (index === 0 && !game.startsWith('[Event')) {\r\n      game = '[Event' + game;\r\n    }\r\n    \r\n    // Extraer FEN y solución\r\n    const fenMatch = game.match(/\\[FEN \"(.*?)\"\\]/);\r\n    const solutionMatch = game.match(/\\[Solution \"(.*?)\"\\]/);\r\n    \r\n    if (fenMatch && solutionMatch) {\r\n      const fen = fenMatch[1];\r\n      const solution = solutionMatch[1]\r\n        .split(/\\d+\\.\\s+/)\r\n        .filter(move => move.trim())\r\n        .flatMap(move => move.split(/\\s+/))\r\n        .filter(move => move.trim());\r\n\r\n      puzzles.push({\r\n        id: index + 1,\r\n        fen: fen,\r\n        solution: solution,\r\n        turnToPlay: fen.includes(' w ') ? 'w' : 'b'\r\n      });\r\n    }\r\n  });\r\n  \r\n  return puzzles;\r\n};\r\n\r\nexport const loadPuzzlesFromPGN = async () => {\r\n  try {\r\n    const pgnFile = await fetch('/data/puzzles/mate-in-two.pgn');\r\n    const pgnText = await pgnFile.text();\r\n    return parsePGN(pgnText);\r\n  } catch (error) {\r\n    console.error('Error loading puzzles:', error);\r\n    return [];\r\n  }\r\n};"],"mappings":"AAAA,SAASA,KAAK,QAAQ,UAAU;AAEhC,MAAMC,QAAQ,GAAIC,OAAO,IAAK;EAC5B,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,KAAK,GAAGF,OAAO,CAACG,KAAK,CAAC,YAAY,CAAC;EAEzCD,KAAK,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC7B,IAAIA,KAAK,KAAK,CAAC,IAAI,CAACD,IAAI,CAACE,UAAU,CAAC,QAAQ,CAAC,EAAE;MAC7CF,IAAI,GAAG,QAAQ,GAAGA,IAAI;IACxB;;IAEA;IACA,MAAMG,QAAQ,GAAGH,IAAI,CAACI,KAAK,CAAC,iBAAiB,CAAC;IAC9C,MAAMC,aAAa,GAAGL,IAAI,CAACI,KAAK,CAAC,sBAAsB,CAAC;IAExD,IAAID,QAAQ,IAAIE,aAAa,EAAE;MAC7B,MAAMC,GAAG,GAAGH,QAAQ,CAAC,CAAC,CAAC;MACvB,MAAMI,QAAQ,GAAGF,aAAa,CAAC,CAAC,CAAC,CAC9BP,KAAK,CAAC,UAAU,CAAC,CACjBU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAC3BC,OAAO,CAACF,IAAI,IAAIA,IAAI,CAACX,KAAK,CAAC,KAAK,CAAC,CAAC,CAClCU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;MAE9Bd,OAAO,CAACgB,IAAI,CAAC;QACXC,EAAE,EAAEZ,KAAK,GAAG,CAAC;QACbK,GAAG,EAAEA,GAAG;QACRC,QAAQ,EAAEA,QAAQ;QAClBO,UAAU,EAAER,GAAG,CAACS,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG;MAC1C,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEF,OAAOnB,OAAO;AAChB,CAAC;AAED,OAAO,MAAMoB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;IAC5D,MAAMvB,OAAO,GAAG,MAAMsB,OAAO,CAACE,IAAI,CAAC,CAAC;IACpC,OAAOzB,QAAQ,CAACC,OAAO,CAAC;EAC1B,CAAC,CAAC,OAAOyB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}