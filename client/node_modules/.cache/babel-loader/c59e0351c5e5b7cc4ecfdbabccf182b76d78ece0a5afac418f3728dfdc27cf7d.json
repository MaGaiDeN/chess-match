{"ast":null,"code":"import{Chess}from'chess.js';const parsePGN=pgnText=>{try{console.log('Iniciando parseo de PGN...');const lines=pgnText.split('\\n');const puzzles=[];let currentPuzzle={};for(const line of lines){const trimmedLine=line.trim();if(trimmedLine===''){if(currentPuzzle.event&&currentPuzzle.fen&&currentPuzzle.solution){puzzles.push({...currentPuzzle});currentPuzzle={};}continue;}if(trimmedLine.startsWith('[Event ')){currentPuzzle.event=trimmedLine.match(/\"([^\"]+)\"/)[1];}else if(trimmedLine.startsWith('[FEN ')){currentPuzzle.fen=trimmedLine.match(/\"([^\"]+)\"/)[1];}else if(trimmedLine.startsWith('[Solution ')){// Extraer y procesar la solución\nconst solutionStr=trimmedLine.match(/\"([^\"]+)\"/)[1];currentPuzzle.solution=solutionStr.split(' ');currentPuzzle.id=puzzles.length+1;currentPuzzle.isMate=solutionStr.includes('#');}}// Añadir el último puzzle si existe\nif(currentPuzzle.event&&currentPuzzle.fen&&currentPuzzle.solution){puzzles.push({...currentPuzzle});}console.log('Puzzles parseados:',puzzles);return puzzles;}catch(error){console.error('Error parseando PGN:',error);return[];}};export const loadPuzzlesFromPGN=async()=>{try{console.log('Cargando archivo de puzzles...');const puzzlePath=process.env.PUBLIC_URL+'/data/puzzles/mate-en-dos-processed.pgn';const response=await fetch(puzzlePath);if(!response.ok)throw new Error(`HTTP error! status: ${response.status}`);const pgnText=await response.text();console.log('Contenido PGN cargado:',pgnText.length,'bytes');const puzzles=parsePGN(pgnText);console.log('Puzzles antes de validación:',puzzles);// Validar cada puzzle\nconst validPuzzles=puzzles.filter(puzzle=>{if(!puzzle.fen||!puzzle.solution){console.error('Puzzle incompleto:',puzzle);return false;}try{const chess=new Chess();chess.load(puzzle.fen);// Si no lanza error, el FEN es válido\nconsole.log('Puzzle válido:',{event:puzzle.event,fen:puzzle.fen,solution:puzzle.solution});return true;}catch(error){console.error('Error validando puzzle:',puzzle.event,error);return false;}});console.log('Puzzles válidos encontrados:',validPuzzles.length);return validPuzzles;}catch(error){console.error('Error cargando puzzles:',error);return[];}};export const getRandomPuzzle=puzzles=>{if(!puzzles||puzzles.length===0){console.error('No hay puzzles disponibles');return null;}const randomIndex=Math.floor(Math.random()*puzzles.length);const selectedPuzzle=puzzles[randomIndex];console.log('Puzzle seleccionado:',selectedPuzzle);return selectedPuzzle;};","map":{"version":3,"names":["Chess","parsePGN","pgnText","console","log","lines","split","puzzles","currentPuzzle","line","trimmedLine","trim","event","fen","solution","push","startsWith","match","solutionStr","id","length","isMate","includes","error","loadPuzzlesFromPGN","puzzlePath","process","env","PUBLIC_URL","response","fetch","ok","Error","status","text","validPuzzles","filter","puzzle","chess","load","getRandomPuzzle","randomIndex","Math","floor","random","selectedPuzzle"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/services/puzzleService.js"],"sourcesContent":["import { Chess } from 'chess.js';\r\n\r\nconst parsePGN = (pgnText) => {\r\n  try {\r\n    console.log('Iniciando parseo de PGN...');\r\n    const lines = pgnText.split('\\n');\r\n    const puzzles = [];\r\n    let currentPuzzle = {};\r\n\r\n    for (const line of lines) {\r\n      const trimmedLine = line.trim();\r\n      \r\n      if (trimmedLine === '') {\r\n        if (currentPuzzle.event && currentPuzzle.fen && currentPuzzle.solution) {\r\n          puzzles.push({...currentPuzzle});\r\n          currentPuzzle = {};\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (trimmedLine.startsWith('[Event ')) {\r\n        currentPuzzle.event = trimmedLine.match(/\"([^\"]+)\"/)[1];\r\n      } else if (trimmedLine.startsWith('[FEN ')) {\r\n        currentPuzzle.fen = trimmedLine.match(/\"([^\"]+)\"/)[1];\r\n      } else if (trimmedLine.startsWith('[Solution ')) {\r\n        // Extraer y procesar la solución\r\n        const solutionStr = trimmedLine.match(/\"([^\"]+)\"/)[1];\r\n        currentPuzzle.solution = solutionStr.split(' ');\r\n        currentPuzzle.id = puzzles.length + 1;\r\n        currentPuzzle.isMate = solutionStr.includes('#');\r\n      }\r\n    }\r\n\r\n    // Añadir el último puzzle si existe\r\n    if (currentPuzzle.event && currentPuzzle.fen && currentPuzzle.solution) {\r\n      puzzles.push({...currentPuzzle});\r\n    }\r\n\r\n    console.log('Puzzles parseados:', puzzles);\r\n    return puzzles;\r\n  } catch (error) {\r\n    console.error('Error parseando PGN:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const loadPuzzlesFromPGN = async () => {\r\n  try {\r\n    console.log('Cargando archivo de puzzles...');\r\n    const puzzlePath = process.env.PUBLIC_URL + '/data/puzzles/mate-en-dos-processed.pgn';\r\n    \r\n    const response = await fetch(puzzlePath);\r\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n    \r\n    const pgnText = await response.text();\r\n    console.log('Contenido PGN cargado:', pgnText.length, 'bytes');\r\n    \r\n    const puzzles = parsePGN(pgnText);\r\n    console.log('Puzzles antes de validación:', puzzles);\r\n    \r\n    // Validar cada puzzle\r\n    const validPuzzles = puzzles.filter(puzzle => {\r\n      if (!puzzle.fen || !puzzle.solution) {\r\n        console.error('Puzzle incompleto:', puzzle);\r\n        return false;\r\n      }\r\n      \r\n      try {\r\n        const chess = new Chess();\r\n        chess.load(puzzle.fen); // Si no lanza error, el FEN es válido\r\n        \r\n        console.log('Puzzle válido:', {\r\n          event: puzzle.event,\r\n          fen: puzzle.fen,\r\n          solution: puzzle.solution\r\n        });\r\n        \r\n        return true;\r\n      } catch (error) {\r\n        console.error('Error validando puzzle:', puzzle.event, error);\r\n        return false;\r\n      }\r\n    });\r\n\r\n    console.log('Puzzles válidos encontrados:', validPuzzles.length);\r\n    return validPuzzles;\r\n  } catch (error) {\r\n    console.error('Error cargando puzzles:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getRandomPuzzle = (puzzles) => {\r\n  if (!puzzles || puzzles.length === 0) {\r\n    console.error('No hay puzzles disponibles');\r\n    return null;\r\n  }\r\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\r\n  const selectedPuzzle = puzzles[randomIndex];\r\n  console.log('Puzzle seleccionado:', selectedPuzzle);\r\n  return selectedPuzzle;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}