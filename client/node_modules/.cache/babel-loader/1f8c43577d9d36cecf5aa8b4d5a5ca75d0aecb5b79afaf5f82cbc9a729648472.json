{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\magai\\\\Desktop\\\\chess-match\\\\client\\\\src\\\\components\\\\Chessboard\\\\Chessboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport { loadPuzzles, getRandomPuzzle } from '../../services/puzzleService';\nimport './Chessboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessboardComponent = ({\n  onPuzzleMessage\n}) => {\n  _s();\n  console.log('Renderizando ChessboardComponent');\n  const [game, setGame] = useState(() => new Chess());\n  const [currentPuzzle, setCurrentPuzzle] = useState(null);\n  const [currentMoveIndex, setCurrentMoveIndex] = useState(0);\n  const [boardWidth, setBoardWidth] = useState(400);\n  useEffect(() => {\n    console.log('Ejecutando useEffect de carga de puzzle');\n    const loadRandomPuzzle = async () => {\n      try {\n        const puzzles = await loadPuzzles();\n        console.log('Puzzles cargados:', puzzles);\n        if (puzzles && puzzles.length > 0) {\n          const puzzle = getRandomPuzzle(puzzles);\n          console.log('Puzzle seleccionado:', puzzle);\n          const newGame = new Chess();\n          newGame.load(puzzle.initialPosition);\n          setGame(newGame);\n          setCurrentPuzzle(puzzle);\n          setCurrentMoveIndex(0);\n          const movesForMate = Math.ceil(puzzle.solution.length / 2);\n          onPuzzleMessage(`${puzzle.turnToPlay === 'w' ? 'Blancas' : 'Negras'} juegan - Mate en ${movesForMate}`);\n        }\n      } catch (error) {\n        console.error('Error loading puzzle:', error);\n      }\n    };\n    loadRandomPuzzle();\n  }, [onPuzzleMessage]);\n  useEffect(() => {\n    const updateDimensions = () => {\n      const container = document.querySelector('.board-wrapper');\n      if (container) {\n        const width = Math.min(container.offsetWidth, 400);\n        setBoardWidth(width);\n      }\n    };\n    window.addEventListener('resize', updateDimensions);\n    updateDimensions(); // Llamada inicial\n\n    return () => window.removeEventListener('resize', updateDimensions);\n  }, []);\n  const makeComputerMove = () => {\n    if (!currentPuzzle || !game || currentMoveIndex >= currentPuzzle.solution.length) {\n      console.log('Puzzle completado');\n      return;\n    }\n    console.log('Realizando movimiento del computador');\n    console.log('Índice actual:', currentMoveIndex);\n    console.log('Turno actual:', game.turn());\n    console.log('Solución completa:', currentPuzzle.solution);\n    try {\n      if (game.turn() === 'b') {\n        const nextMove = currentPuzzle.solution[currentMoveIndex + 1];\n        if (!nextMove) {\n          console.log('No hay más movimientos');\n          return;\n        }\n        const move = game.move(nextMove);\n        if (move) {\n          console.log('Movimiento del computador realizado:', move.san);\n          setGame(new Chess(game.fen()));\n          setCurrentMoveIndex(prev => prev + 1);\n          const movesLeft = Math.ceil((currentPuzzle.solution.length - currentMoveIndex - 2) / 2);\n          onPuzzleMessage(`Tu turno - ${movesLeft > 0 ? `Mate en ${movesLeft}` : 'Dale mate'}`);\n        }\n      }\n    } catch (error) {\n      console.log('Puzzle completado');\n    }\n  };\n  const onDrop = (sourceSquare, targetSquare) => {\n    console.log('Intento de movimiento:', sourceSquare, 'a', targetSquare);\n    if (!currentPuzzle || !game) return false;\n    try {\n      const move = game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: 'q'\n      });\n      if (!move) {\n        console.log('Movimiento inválido');\n        return false;\n      }\n      console.log('Movimiento realizado:', move.san);\n      console.log('Movimiento esperado:', currentPuzzle.solution[currentMoveIndex]);\n      if (move.san === currentPuzzle.solution[currentMoveIndex]) {\n        setGame(new Chess(game.fen()));\n        setCurrentMoveIndex(prev => prev + 1);\n        if (move.san.includes('#')) {\n          onPuzzleMessage('¡Excelente! ¡Puzzle completado!');\n          return true;\n        }\n        onPuzzleMessage('¡Correcto! Pensando...');\n        setTimeout(() => {\n          makeComputerMove();\n        }, 500);\n        return true;\n      } else {\n        game.undo();\n        onPuzzleMessage('Movimiento incorrecto - Intenta de nuevo');\n        return false;\n      }\n    } catch (error) {\n      console.error('Error al realizar movimiento:', error);\n      return false;\n    }\n  };\n  console.log('Estado actual del juego:', game === null || game === void 0 ? void 0 : game.fen());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game === null || game === void 0 ? void 0 : game.fen(),\n        onPieceDrop: onDrop,\n        boardWidth: boardWidth,\n        customDragLayer: false,\n        boardOrientation: (currentPuzzle === null || currentPuzzle === void 0 ? void 0 : currentPuzzle.turnToPlay) === 'b' ? 'black' : 'white',\n        transitionDuration: 200\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessboardComponent, \"WISOijCNITJnfpw0EdDCRS0QRyI=\");\n_c = ChessboardComponent;\nexport default ChessboardComponent;\nvar _c;\n$RefreshReg$(_c, \"ChessboardComponent\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","loadPuzzles","getRandomPuzzle","jsxDEV","_jsxDEV","ChessboardComponent","onPuzzleMessage","_s","console","log","game","setGame","currentPuzzle","setCurrentPuzzle","currentMoveIndex","setCurrentMoveIndex","boardWidth","setBoardWidth","loadRandomPuzzle","puzzles","length","puzzle","newGame","load","initialPosition","movesForMate","Math","ceil","solution","turnToPlay","error","updateDimensions","container","document","querySelector","width","min","offsetWidth","window","addEventListener","removeEventListener","makeComputerMove","turn","nextMove","move","san","fen","prev","movesLeft","onDrop","sourceSquare","targetSquare","from","to","promotion","includes","setTimeout","undo","className","children","position","onPieceDrop","customDragLayer","boardOrientation","transitionDuration","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/components/Chessboard/Chessboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Chessboard } from 'react-chessboard';\r\nimport { Chess } from 'chess.js';\r\nimport { loadPuzzles, getRandomPuzzle } from '../../services/puzzleService';\r\nimport './Chessboard.css';\r\n\r\nconst ChessboardComponent = ({ onPuzzleMessage }) => {\r\n  console.log('Renderizando ChessboardComponent');\r\n  \r\n  const [game, setGame] = useState(() => new Chess());\r\n  \r\n  const [currentPuzzle, setCurrentPuzzle] = useState(null);\r\n  const [currentMoveIndex, setCurrentMoveIndex] = useState(0);\r\n  const [boardWidth, setBoardWidth] = useState(400);\r\n\r\n  useEffect(() => {\r\n    console.log('Ejecutando useEffect de carga de puzzle');\r\n    const loadRandomPuzzle = async () => {\r\n      try {\r\n        const puzzles = await loadPuzzles();\r\n        console.log('Puzzles cargados:', puzzles);\r\n\r\n        if (puzzles && puzzles.length > 0) {\r\n          const puzzle = getRandomPuzzle(puzzles);\r\n          console.log('Puzzle seleccionado:', puzzle);\r\n\r\n          const newGame = new Chess();\r\n          \r\n          newGame.load(puzzle.initialPosition);\r\n          \r\n          setGame(newGame);\r\n          setCurrentPuzzle(puzzle);\r\n          setCurrentMoveIndex(0);\r\n          \r\n          const movesForMate = Math.ceil(puzzle.solution.length / 2);\r\n          onPuzzleMessage(`${puzzle.turnToPlay === 'w' ? 'Blancas' : 'Negras'} juegan - Mate en ${movesForMate}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading puzzle:', error);\r\n      }\r\n    };\r\n\r\n    loadRandomPuzzle();\r\n  }, [onPuzzleMessage]);\r\n\r\n  useEffect(() => {\r\n    const updateDimensions = () => {\r\n      const container = document.querySelector('.board-wrapper');\r\n      if (container) {\r\n        const width = Math.min(container.offsetWidth, 400);\r\n        setBoardWidth(width);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('resize', updateDimensions);\r\n    updateDimensions(); // Llamada inicial\r\n\r\n    return () => window.removeEventListener('resize', updateDimensions);\r\n  }, []);\r\n\r\n  const makeComputerMove = () => {\r\n    if (!currentPuzzle || !game || currentMoveIndex >= currentPuzzle.solution.length) {\r\n      console.log('Puzzle completado');\r\n      return;\r\n    }\r\n    \r\n    console.log('Realizando movimiento del computador');\r\n    console.log('Índice actual:', currentMoveIndex);\r\n    console.log('Turno actual:', game.turn());\r\n    console.log('Solución completa:', currentPuzzle.solution);\r\n    \r\n    try {\r\n      if (game.turn() === 'b') {\r\n        const nextMove = currentPuzzle.solution[currentMoveIndex + 1];\r\n        if (!nextMove) {\r\n          console.log('No hay más movimientos');\r\n          return;\r\n        }\r\n\r\n        const move = game.move(nextMove);\r\n        if (move) {\r\n          console.log('Movimiento del computador realizado:', move.san);\r\n          setGame(new Chess(game.fen()));\r\n          setCurrentMoveIndex(prev => prev + 1);\r\n          \r\n          const movesLeft = Math.ceil((currentPuzzle.solution.length - currentMoveIndex - 2) / 2);\r\n          onPuzzleMessage(`Tu turno - ${movesLeft > 0 ? `Mate en ${movesLeft}` : 'Dale mate'}`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Puzzle completado');\r\n    }\r\n  };\r\n\r\n  const onDrop = (sourceSquare, targetSquare) => {\r\n    console.log('Intento de movimiento:', sourceSquare, 'a', targetSquare);\r\n    if (!currentPuzzle || !game) return false;\r\n\r\n    try {\r\n      const move = game.move({\r\n        from: sourceSquare,\r\n        to: targetSquare,\r\n        promotion: 'q'\r\n      });\r\n\r\n      if (!move) {\r\n        console.log('Movimiento inválido');\r\n        return false;\r\n      }\r\n\r\n      console.log('Movimiento realizado:', move.san);\r\n      console.log('Movimiento esperado:', currentPuzzle.solution[currentMoveIndex]);\r\n\r\n      if (move.san === currentPuzzle.solution[currentMoveIndex]) {\r\n        setGame(new Chess(game.fen()));\r\n        setCurrentMoveIndex(prev => prev + 1);\r\n        \r\n        if (move.san.includes('#')) {\r\n          onPuzzleMessage('¡Excelente! ¡Puzzle completado!');\r\n          return true;\r\n        }\r\n        \r\n        onPuzzleMessage('¡Correcto! Pensando...');\r\n        \r\n        setTimeout(() => {\r\n          makeComputerMove();\r\n        }, 500);\r\n        \r\n        return true;\r\n      } else {\r\n        game.undo();\r\n        onPuzzleMessage('Movimiento incorrecto - Intenta de nuevo');\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar movimiento:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  console.log('Estado actual del juego:', game?.fen());\r\n  \r\n  return (\r\n    <div className=\"chessboard-container\">\r\n      <div className=\"board-wrapper\">\r\n        <Chessboard \r\n          position={game?.fen()}\r\n          onPieceDrop={onDrop}\r\n          boardWidth={boardWidth}\r\n          customDragLayer={false}\r\n          boardOrientation={currentPuzzle?.turnToPlay === 'b' ? 'black' : 'white'}\r\n          transitionDuration={200}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessboardComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}