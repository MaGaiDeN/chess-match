{"ast":null,"code":"import { Chess } from 'chess.js';\nconst parsePGN = pgnText => {\n  const puzzles = [];\n  const games = pgnText.split('\\n\\n[Event');\n  games.forEach((game, index) => {\n    if (index === 0 && !game.startsWith('[Event')) {\n      game = '[Event' + game;\n    }\n\n    // Extraer FEN\n    const fenMatch = game.match(/\\[FEN \"(.*?)\"\\]/);\n    if (fenMatch) {\n      const fen = fenMatch[1];\n\n      // Extraer movimientos de la solución\n      const moveText = game.split('\\n\\n')[1];\n      if (moveText) {\n        const moves = moveText.replace(/1-0$/, '').trim().split(/\\d+\\.\\s+/).filter(move => move.trim()).flatMap(move => move.split(/\\s+/)).filter(move => move.trim());\n        puzzles.push({\n          id: index + 1,\n          fen: fen,\n          solution: moves,\n          turnToPlay: fen.includes(' w ') ? 'w' : 'b'\n        });\n      }\n    }\n  });\n  console.log('Puzzles parseados:', puzzles);\n  return puzzles;\n};\nexport const loadPuzzlesFromPGN = async () => {\n  try {\n    console.log('Intentando cargar el archivo PGN...');\n    const response = await fetch('/data/puzzles/mate-en-dos.pgn');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const pgnText = await response.text();\n    console.log('Contenido PGN cargado:', pgnText);\n    return parsePGN(pgnText);\n  } catch (error) {\n    console.error('Error loading puzzles:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["Chess","parsePGN","pgnText","puzzles","games","split","forEach","game","index","startsWith","fenMatch","match","fen","moveText","moves","replace","trim","filter","move","flatMap","push","id","solution","turnToPlay","includes","console","log","loadPuzzlesFromPGN","response","fetch","ok","Error","status","text","error"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/services/puzzleService.js"],"sourcesContent":["import { Chess } from 'chess.js';\r\n\r\nconst parsePGN = (pgnText) => {\r\n  const puzzles = [];\r\n  const games = pgnText.split('\\n\\n[Event');\r\n  \r\n  games.forEach((game, index) => {\r\n    if (index === 0 && !game.startsWith('[Event')) {\r\n      game = '[Event' + game;\r\n    }\r\n    \r\n    // Extraer FEN\r\n    const fenMatch = game.match(/\\[FEN \"(.*?)\"\\]/);\r\n    if (fenMatch) {\r\n      const fen = fenMatch[1];\r\n      \r\n      // Extraer movimientos de la solución\r\n      const moveText = game.split('\\n\\n')[1];\r\n      if (moveText) {\r\n        const moves = moveText\r\n          .replace(/1-0$/, '')\r\n          .trim()\r\n          .split(/\\d+\\.\\s+/)\r\n          .filter(move => move.trim())\r\n          .flatMap(move => move.split(/\\s+/))\r\n          .filter(move => move.trim());\r\n\r\n        puzzles.push({\r\n          id: index + 1,\r\n          fen: fen,\r\n          solution: moves,\r\n          turnToPlay: fen.includes(' w ') ? 'w' : 'b'\r\n        });\r\n      }\r\n    }\r\n  });\r\n  \r\n  console.log('Puzzles parseados:', puzzles);\r\n  return puzzles;\r\n};\r\n\r\nexport const loadPuzzlesFromPGN = async () => {\r\n  try {\r\n    console.log('Intentando cargar el archivo PGN...');\r\n    const response = await fetch('/data/puzzles/mate-en-dos.pgn');\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const pgnText = await response.text();\r\n    console.log('Contenido PGN cargado:', pgnText);\r\n    return parsePGN(pgnText);\r\n  } catch (error) {\r\n    console.error('Error loading puzzles:', error);\r\n    return [];\r\n  }\r\n};"],"mappings":"AAAA,SAASA,KAAK,QAAQ,UAAU;AAEhC,MAAMC,QAAQ,GAAIC,OAAO,IAAK;EAC5B,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,KAAK,GAAGF,OAAO,CAACG,KAAK,CAAC,YAAY,CAAC;EAEzCD,KAAK,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC7B,IAAIA,KAAK,KAAK,CAAC,IAAI,CAACD,IAAI,CAACE,UAAU,CAAC,QAAQ,CAAC,EAAE;MAC7CF,IAAI,GAAG,QAAQ,GAAGA,IAAI;IACxB;;IAEA;IACA,MAAMG,QAAQ,GAAGH,IAAI,CAACI,KAAK,CAAC,iBAAiB,CAAC;IAC9C,IAAID,QAAQ,EAAE;MACZ,MAAME,GAAG,GAAGF,QAAQ,CAAC,CAAC,CAAC;;MAEvB;MACA,MAAMG,QAAQ,GAAGN,IAAI,CAACF,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;MACtC,IAAIQ,QAAQ,EAAE;QACZ,MAAMC,KAAK,GAAGD,QAAQ,CACnBE,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CACnBC,IAAI,CAAC,CAAC,CACNX,KAAK,CAAC,UAAU,CAAC,CACjBY,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACF,IAAI,CAAC,CAAC,CAAC,CAC3BG,OAAO,CAACD,IAAI,IAAIA,IAAI,CAACb,KAAK,CAAC,KAAK,CAAC,CAAC,CAClCY,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACF,IAAI,CAAC,CAAC,CAAC;QAE9Bb,OAAO,CAACiB,IAAI,CAAC;UACXC,EAAE,EAAEb,KAAK,GAAG,CAAC;UACbI,GAAG,EAAEA,GAAG;UACRU,QAAQ,EAAER,KAAK;UACfS,UAAU,EAAEX,GAAG,CAACY,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG;QAC1C,CAAC,CAAC;MACJ;IACF;EACF,CAAC,CAAC;EAEFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEvB,OAAO,CAAC;EAC1C,OAAOA,OAAO;AAChB,CAAC;AAED,OAAO,MAAMwB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACFF,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAClD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;IAC7D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IACA,MAAM9B,OAAO,GAAG,MAAM0B,QAAQ,CAACK,IAAI,CAAC,CAAC;IACrCR,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAExB,OAAO,CAAC;IAC9C,OAAOD,QAAQ,CAACC,OAAO,CAAC;EAC1B,CAAC,CAAC,OAAOgC,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}