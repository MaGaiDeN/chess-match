{"ast":null,"code":"import { Chess } from 'chess.js';\nconst parsePGN = pgnText => {\n  const puzzles = [];\n  console.log('Iniciando procesamiento de PGN...');\n\n  // Dividir por puzzles (separados por línea en blanco)\n  const games = pgnText.trim().split('\\n\\n');\n  console.log(`Encontrados ${games.length} puzzles para procesar`);\n  games.forEach((game, index) => {\n    try {\n      // Extraer las líneas del puzzle\n      const lines = game.trim().split('\\n');\n\n      // Buscar FEN y Solution en las líneas\n      const fenLine = lines.find(line => line.startsWith('[FEN'));\n      const solutionLine = lines.find(line => line.startsWith('[Solution'));\n      if (fenLine && solutionLine) {\n        // Extraer FEN y solución\n        const fen = fenLine.match(/\\[FEN \"([^\"]+)\"\\]/)[1];\n        const solutionText = solutionLine.match(/\\[Solution \"([^\"]+)\"\\]/)[1];\n\n        // Procesar la solución\n        const solution = solutionText.split(' ').map(move => move.endsWith('#') ? move.slice(0, -1) : move);\n\n        // Verificar FEN\n        const chess = new Chess();\n        if (chess.load(fen)) {\n          puzzles.push({\n            id: index + 1,\n            event: lines[0].match(/\\[Event \"([^\"]+)\"\\]/)[1],\n            fen: fen,\n            solution: solution,\n            isMate: true,\n            turnToPlay: 'w'\n          });\n          console.log(`Puzzle ${index + 1} procesado correctamente:`, {\n            fen: fen,\n            solution: solution\n          });\n        }\n      }\n    } catch (error) {\n      console.error(`Error al procesar puzzle ${index + 1}:`, error);\n    }\n  });\n  return puzzles;\n};\nexport const loadPuzzlesFromPGN = async () => {\n  try {\n    console.log('Cargando archivo de puzzles...');\n    const response = await fetch('/data/puzzles/mate-en-dos-processed.pgn');\n    if (!response.ok) {\n      console.error('Error HTTP:', response.status, response.statusText);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const pgnText = await response.text();\n    console.log('Archivo PGN cargado, tamaño:', pgnText.length, 'bytes');\n    console.log('Primeros 200 caracteres:', pgnText.substring(0, 200));\n    const puzzles = parsePGN(pgnText);\n    console.log(`${puzzles.length} puzzles procesados correctamente`);\n    return puzzles;\n  } catch (error) {\n    console.error('Error loading puzzles:', error);\n    return [];\n  }\n};\nexport const getRandomPuzzle = puzzles => {\n  if (!puzzles || puzzles.length === 0) {\n    console.error('No hay puzzles disponibles');\n    return null;\n  }\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\n  const selectedPuzzle = puzzles[randomIndex];\n  console.log('Puzzle seleccionado:', selectedPuzzle);\n  return selectedPuzzle;\n};","map":{"version":3,"names":["Chess","parsePGN","pgnText","puzzles","console","log","games","trim","split","length","forEach","game","index","lines","fenLine","find","line","startsWith","solutionLine","fen","match","solutionText","solution","map","move","endsWith","slice","chess","load","push","id","event","isMate","turnToPlay","error","loadPuzzlesFromPGN","response","fetch","ok","status","statusText","Error","text","substring","getRandomPuzzle","randomIndex","Math","floor","random","selectedPuzzle"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/services/puzzleService.js"],"sourcesContent":["import { Chess } from 'chess.js';\r\n\r\nconst parsePGN = (pgnText) => {\r\n  const puzzles = [];\r\n  console.log('Iniciando procesamiento de PGN...');\r\n  \r\n  // Dividir por puzzles (separados por línea en blanco)\r\n  const games = pgnText.trim().split('\\n\\n');\r\n  console.log(`Encontrados ${games.length} puzzles para procesar`);\r\n  \r\n  games.forEach((game, index) => {\r\n    try {\r\n      // Extraer las líneas del puzzle\r\n      const lines = game.trim().split('\\n');\r\n      \r\n      // Buscar FEN y Solution en las líneas\r\n      const fenLine = lines.find(line => line.startsWith('[FEN'));\r\n      const solutionLine = lines.find(line => line.startsWith('[Solution'));\r\n      \r\n      if (fenLine && solutionLine) {\r\n        // Extraer FEN y solución\r\n        const fen = fenLine.match(/\\[FEN \"([^\"]+)\"\\]/)[1];\r\n        const solutionText = solutionLine.match(/\\[Solution \"([^\"]+)\"\\]/)[1];\r\n        \r\n        // Procesar la solución\r\n        const solution = solutionText\r\n          .split(' ')\r\n          .map(move => move.endsWith('#') ? move.slice(0, -1) : move);\r\n        \r\n        // Verificar FEN\r\n        const chess = new Chess();\r\n        if (chess.load(fen)) {\r\n          puzzles.push({\r\n            id: index + 1,\r\n            event: lines[0].match(/\\[Event \"([^\"]+)\"\\]/)[1],\r\n            fen: fen,\r\n            solution: solution,\r\n            isMate: true,\r\n            turnToPlay: 'w'\r\n          });\r\n          console.log(`Puzzle ${index + 1} procesado correctamente:`, {\r\n            fen: fen,\r\n            solution: solution\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error al procesar puzzle ${index + 1}:`, error);\r\n    }\r\n  });\r\n  \r\n  return puzzles;\r\n};\r\n\r\nexport const loadPuzzlesFromPGN = async () => {\r\n  try {\r\n    console.log('Cargando archivo de puzzles...');\r\n    const response = await fetch('/data/puzzles/mate-en-dos-processed.pgn');\r\n    \r\n    if (!response.ok) {\r\n      console.error('Error HTTP:', response.status, response.statusText);\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const pgnText = await response.text();\r\n    console.log('Archivo PGN cargado, tamaño:', pgnText.length, 'bytes');\r\n    console.log('Primeros 200 caracteres:', pgnText.substring(0, 200));\r\n    \r\n    const puzzles = parsePGN(pgnText);\r\n    console.log(`${puzzles.length} puzzles procesados correctamente`);\r\n    \r\n    return puzzles;\r\n  } catch (error) {\r\n    console.error('Error loading puzzles:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getRandomPuzzle = (puzzles) => {\r\n  if (!puzzles || puzzles.length === 0) {\r\n    console.error('No hay puzzles disponibles');\r\n    return null;\r\n  }\r\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\r\n  const selectedPuzzle = puzzles[randomIndex];\r\n  console.log('Puzzle seleccionado:', selectedPuzzle);\r\n  return selectedPuzzle;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}