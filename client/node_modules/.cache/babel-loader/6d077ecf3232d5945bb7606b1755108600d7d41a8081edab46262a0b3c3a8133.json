{"ast":null,"code":"import { Chess } from 'chess.js';\nconst validateFEN = fen => {\n  // Validación básica de FEN\n  const parts = fen.split(' ');\n  if (parts.length !== 6) return false;\n  const [board, turn, castling, enPassant, halfmove, fullmove] = parts;\n\n  // Validar estructura del tablero\n  const ranks = board.split('/');\n  if (ranks.length !== 8) return false;\n\n  // Validar cada fila\n  for (const rank of ranks) {\n    let squares = 0;\n    for (const char of rank) {\n      if ('12345678'.includes(char)) {\n        squares += parseInt(char);\n      } else if ('pnbrqkPNBRQK'.includes(char)) {\n        squares += 1;\n      } else {\n        return false;\n      }\n    }\n    if (squares !== 8) return false;\n  }\n\n  // Validar turno\n  if (!['w', 'b'].includes(turn)) return false;\n  return true;\n};\nconst parsePGN = pgnText => {\n  const puzzles = [];\n  console.log('Iniciando procesamiento de PGN...');\n\n  // Dividir por puzzles (dos saltos de línea)\n  const games = pgnText.split('\\n\\n[Event');\n  console.log(`Encontrados ${games.length} puzzles para procesar`);\n  games.forEach((game, index) => {\n    try {\n      // Añadir [Event de vuelta al inicio si no es el primer puzzle\n      const puzzleText = index === 0 ? game : '[Event' + game;\n\n      // Extraer datos usando expresiones regulares\n      const eventMatch = puzzleText.match(/\\[Event \"([^\"]+)\"\\]/);\n      const fenMatch = puzzleText.match(/\\[FEN \"([^\"]+)\"\\]/);\n      const solutionMatch = puzzleText.match(/\\[Solution \"([^\"]+)\"\\]/);\n      if (eventMatch && fenMatch && solutionMatch) {\n        const event = eventMatch[1];\n        const fen = fenMatch[1].trim();\n        const solutionText = solutionMatch[1];\n        console.log(`Procesando puzzle ${index + 1}:`, {\n          event,\n          fen,\n          solution: solutionText\n        });\n\n        // Procesar la solución\n        const solution = solutionText.split(' ').map(move => move.endsWith('#') ? move.slice(0, -1) : move);\n\n        // Verificar FEN usando nuestra función personalizada\n        if (validateFEN(fen)) {\n          const puzzle = {\n            id: index + 1,\n            event: event,\n            fen: fen,\n            solution: solution,\n            isMate: true,\n            turnToPlay: fen.includes(' w ') ? 'w' : 'b'\n          };\n          puzzles.push(puzzle);\n          console.log(`Puzzle ${index + 1} procesado correctamente:`, puzzle);\n        } else {\n          console.error(`FEN inválido en puzzle ${index + 1}:`, fen);\n        }\n      } else {\n        console.error(`Datos faltantes en puzzle ${index + 1}:`, {\n          event: !!eventMatch,\n          fen: !!fenMatch,\n          solution: !!solutionMatch\n        });\n      }\n    } catch (error) {\n      console.error(`Error al procesar puzzle ${index + 1}:`, error);\n    }\n  });\n  return puzzles;\n};\nexport const loadPuzzlesFromPGN = async () => {\n  try {\n    console.log('Cargando archivo de puzzles...');\n    const puzzlePath = process.env.PUBLIC_URL + '/data/puzzles/mate-en-dos-processed.pgn';\n    console.log('Intentando cargar puzzles desde:', puzzlePath);\n    const response = await fetch(puzzlePath);\n    if (!response.ok) {\n      console.error('Error HTTP:', response.status, response.statusText);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const pgnText = await response.text();\n    console.log('Archivo PGN cargado, tamaño:', pgnText.length, 'bytes');\n\n    // Limpiar posibles caracteres especiales o BOM\n    const cleanPgnText = pgnText.trim().replace(/^\\uFEFF/, '');\n    const puzzles = parsePGN(cleanPgnText);\n    console.log(`${puzzles.length} puzzles procesados correctamente:`, puzzles);\n    return puzzles;\n  } catch (error) {\n    console.error('Error loading puzzles:', error);\n    return [];\n  }\n};\nexport const getRandomPuzzle = puzzles => {\n  if (!puzzles || puzzles.length === 0) {\n    console.error('No hay puzzles disponibles');\n    return null;\n  }\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\n  const selectedPuzzle = puzzles[randomIndex];\n  console.log('Puzzle seleccionado:', selectedPuzzle);\n  return selectedPuzzle;\n};","map":{"version":3,"names":["Chess","validateFEN","fen","parts","split","length","board","turn","castling","enPassant","halfmove","fullmove","ranks","rank","squares","char","includes","parseInt","parsePGN","pgnText","puzzles","console","log","games","forEach","game","index","puzzleText","eventMatch","match","fenMatch","solutionMatch","event","trim","solutionText","solution","map","move","endsWith","slice","puzzle","id","isMate","turnToPlay","push","error","loadPuzzlesFromPGN","puzzlePath","process","env","PUBLIC_URL","response","fetch","ok","status","statusText","Error","text","cleanPgnText","replace","getRandomPuzzle","randomIndex","Math","floor","random","selectedPuzzle"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/services/puzzleService.js"],"sourcesContent":["import { Chess } from 'chess.js';\r\n\r\nconst validateFEN = (fen) => {\r\n  // Validación básica de FEN\r\n  const parts = fen.split(' ');\r\n  if (parts.length !== 6) return false;\r\n  \r\n  const [board, turn, castling, enPassant, halfmove, fullmove] = parts;\r\n  \r\n  // Validar estructura del tablero\r\n  const ranks = board.split('/');\r\n  if (ranks.length !== 8) return false;\r\n  \r\n  // Validar cada fila\r\n  for (const rank of ranks) {\r\n    let squares = 0;\r\n    for (const char of rank) {\r\n      if ('12345678'.includes(char)) {\r\n        squares += parseInt(char);\r\n      } else if ('pnbrqkPNBRQK'.includes(char)) {\r\n        squares += 1;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    if (squares !== 8) return false;\r\n  }\r\n  \r\n  // Validar turno\r\n  if (!['w', 'b'].includes(turn)) return false;\r\n  \r\n  return true;\r\n};\r\n\r\nconst parsePGN = (pgnText) => {\r\n  const puzzles = [];\r\n  console.log('Iniciando procesamiento de PGN...');\r\n  \r\n  // Dividir por puzzles (dos saltos de línea)\r\n  const games = pgnText.split('\\n\\n[Event');\r\n  console.log(`Encontrados ${games.length} puzzles para procesar`);\r\n  \r\n  games.forEach((game, index) => {\r\n    try {\r\n      // Añadir [Event de vuelta al inicio si no es el primer puzzle\r\n      const puzzleText = index === 0 ? game : '[Event' + game;\r\n      \r\n      // Extraer datos usando expresiones regulares\r\n      const eventMatch = puzzleText.match(/\\[Event \"([^\"]+)\"\\]/);\r\n      const fenMatch = puzzleText.match(/\\[FEN \"([^\"]+)\"\\]/);\r\n      const solutionMatch = puzzleText.match(/\\[Solution \"([^\"]+)\"\\]/);\r\n      \r\n      if (eventMatch && fenMatch && solutionMatch) {\r\n        const event = eventMatch[1];\r\n        const fen = fenMatch[1].trim();\r\n        const solutionText = solutionMatch[1];\r\n        \r\n        console.log(`Procesando puzzle ${index + 1}:`, {\r\n          event,\r\n          fen,\r\n          solution: solutionText\r\n        });\r\n        \r\n        // Procesar la solución\r\n        const solution = solutionText\r\n          .split(' ')\r\n          .map(move => move.endsWith('#') ? move.slice(0, -1) : move);\r\n        \r\n        // Verificar FEN usando nuestra función personalizada\r\n        if (validateFEN(fen)) {\r\n          const puzzle = {\r\n            id: index + 1,\r\n            event: event,\r\n            fen: fen,\r\n            solution: solution,\r\n            isMate: true,\r\n            turnToPlay: fen.includes(' w ') ? 'w' : 'b'\r\n          };\r\n          puzzles.push(puzzle);\r\n          console.log(`Puzzle ${index + 1} procesado correctamente:`, puzzle);\r\n        } else {\r\n          console.error(`FEN inválido en puzzle ${index + 1}:`, fen);\r\n        }\r\n      } else {\r\n        console.error(`Datos faltantes en puzzle ${index + 1}:`, {\r\n          event: !!eventMatch,\r\n          fen: !!fenMatch,\r\n          solution: !!solutionMatch\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error al procesar puzzle ${index + 1}:`, error);\r\n    }\r\n  });\r\n  \r\n  return puzzles;\r\n};\r\n\r\nexport const loadPuzzlesFromPGN = async () => {\r\n  try {\r\n    console.log('Cargando archivo de puzzles...');\r\n    const puzzlePath = process.env.PUBLIC_URL + '/data/puzzles/mate-en-dos-processed.pgn';\r\n    console.log('Intentando cargar puzzles desde:', puzzlePath);\r\n    \r\n    const response = await fetch(puzzlePath);\r\n    \r\n    if (!response.ok) {\r\n      console.error('Error HTTP:', response.status, response.statusText);\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const pgnText = await response.text();\r\n    console.log('Archivo PGN cargado, tamaño:', pgnText.length, 'bytes');\r\n    \r\n    // Limpiar posibles caracteres especiales o BOM\r\n    const cleanPgnText = pgnText.trim().replace(/^\\uFEFF/, '');\r\n    \r\n    const puzzles = parsePGN(cleanPgnText);\r\n    console.log(`${puzzles.length} puzzles procesados correctamente:`, puzzles);\r\n    \r\n    return puzzles;\r\n  } catch (error) {\r\n    console.error('Error loading puzzles:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getRandomPuzzle = (puzzles) => {\r\n  if (!puzzles || puzzles.length === 0) {\r\n    console.error('No hay puzzles disponibles');\r\n    return null;\r\n  }\r\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\r\n  const selectedPuzzle = puzzles[randomIndex];\r\n  console.log('Puzzle seleccionado:', selectedPuzzle);\r\n  return selectedPuzzle;\r\n};"],"mappings":"AAAA,SAASA,KAAK,QAAQ,UAAU;AAEhC,MAAMC,WAAW,GAAIC,GAAG,IAAK;EAC3B;EACA,MAAMC,KAAK,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;EAC5B,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE,OAAO,KAAK;EAEpC,MAAM,CAACC,KAAK,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,CAAC,GAAGR,KAAK;;EAEpE;EACA,MAAMS,KAAK,GAAGN,KAAK,CAACF,KAAK,CAAC,GAAG,CAAC;EAC9B,IAAIQ,KAAK,CAACP,MAAM,KAAK,CAAC,EAAE,OAAO,KAAK;;EAEpC;EACA,KAAK,MAAMQ,IAAI,IAAID,KAAK,EAAE;IACxB,IAAIE,OAAO,GAAG,CAAC;IACf,KAAK,MAAMC,IAAI,IAAIF,IAAI,EAAE;MACvB,IAAI,UAAU,CAACG,QAAQ,CAACD,IAAI,CAAC,EAAE;QAC7BD,OAAO,IAAIG,QAAQ,CAACF,IAAI,CAAC;MAC3B,CAAC,MAAM,IAAI,cAAc,CAACC,QAAQ,CAACD,IAAI,CAAC,EAAE;QACxCD,OAAO,IAAI,CAAC;MACd,CAAC,MAAM;QACL,OAAO,KAAK;MACd;IACF;IACA,IAAIA,OAAO,KAAK,CAAC,EAAE,OAAO,KAAK;EACjC;;EAEA;EACA,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAACE,QAAQ,CAACT,IAAI,CAAC,EAAE,OAAO,KAAK;EAE5C,OAAO,IAAI;AACb,CAAC;AAED,MAAMW,QAAQ,GAAIC,OAAO,IAAK;EAC5B,MAAMC,OAAO,GAAG,EAAE;EAClBC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;;EAEhD;EACA,MAAMC,KAAK,GAAGJ,OAAO,CAACf,KAAK,CAAC,YAAY,CAAC;EACzCiB,OAAO,CAACC,GAAG,CAAC,eAAeC,KAAK,CAAClB,MAAM,wBAAwB,CAAC;EAEhEkB,KAAK,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC7B,IAAI;MACF;MACA,MAAMC,UAAU,GAAGD,KAAK,KAAK,CAAC,GAAGD,IAAI,GAAG,QAAQ,GAAGA,IAAI;;MAEvD;MACA,MAAMG,UAAU,GAAGD,UAAU,CAACE,KAAK,CAAC,qBAAqB,CAAC;MAC1D,MAAMC,QAAQ,GAAGH,UAAU,CAACE,KAAK,CAAC,mBAAmB,CAAC;MACtD,MAAME,aAAa,GAAGJ,UAAU,CAACE,KAAK,CAAC,wBAAwB,CAAC;MAEhE,IAAID,UAAU,IAAIE,QAAQ,IAAIC,aAAa,EAAE;QAC3C,MAAMC,KAAK,GAAGJ,UAAU,CAAC,CAAC,CAAC;QAC3B,MAAM1B,GAAG,GAAG4B,QAAQ,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC;QAC9B,MAAMC,YAAY,GAAGH,aAAa,CAAC,CAAC,CAAC;QAErCV,OAAO,CAACC,GAAG,CAAC,qBAAqBI,KAAK,GAAG,CAAC,GAAG,EAAE;UAC7CM,KAAK;UACL9B,GAAG;UACHiC,QAAQ,EAAED;QACZ,CAAC,CAAC;;QAEF;QACA,MAAMC,QAAQ,GAAGD,YAAY,CAC1B9B,KAAK,CAAC,GAAG,CAAC,CACVgC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAGD,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGF,IAAI,CAAC;;QAE7D;QACA,IAAIpC,WAAW,CAACC,GAAG,CAAC,EAAE;UACpB,MAAMsC,MAAM,GAAG;YACbC,EAAE,EAAEf,KAAK,GAAG,CAAC;YACbM,KAAK,EAAEA,KAAK;YACZ9B,GAAG,EAAEA,GAAG;YACRiC,QAAQ,EAAEA,QAAQ;YAClBO,MAAM,EAAE,IAAI;YACZC,UAAU,EAAEzC,GAAG,CAACc,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG;UAC1C,CAAC;UACDI,OAAO,CAACwB,IAAI,CAACJ,MAAM,CAAC;UACpBnB,OAAO,CAACC,GAAG,CAAC,UAAUI,KAAK,GAAG,CAAC,2BAA2B,EAAEc,MAAM,CAAC;QACrE,CAAC,MAAM;UACLnB,OAAO,CAACwB,KAAK,CAAC,0BAA0BnB,KAAK,GAAG,CAAC,GAAG,EAAExB,GAAG,CAAC;QAC5D;MACF,CAAC,MAAM;QACLmB,OAAO,CAACwB,KAAK,CAAC,6BAA6BnB,KAAK,GAAG,CAAC,GAAG,EAAE;UACvDM,KAAK,EAAE,CAAC,CAACJ,UAAU;UACnB1B,GAAG,EAAE,CAAC,CAAC4B,QAAQ;UACfK,QAAQ,EAAE,CAAC,CAACJ;QACd,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdxB,OAAO,CAACwB,KAAK,CAAC,4BAA4BnB,KAAK,GAAG,CAAC,GAAG,EAAEmB,KAAK,CAAC;IAChE;EACF,CAAC,CAAC;EAEF,OAAOzB,OAAO;AAChB,CAAC;AAED,OAAO,MAAM0B,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACFzB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC7C,MAAMyB,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,GAAG,yCAAyC;IACrF7B,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEyB,UAAU,CAAC;IAE3D,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACL,UAAU,CAAC;IAExC,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;MAChBhC,OAAO,CAACwB,KAAK,CAAC,aAAa,EAAEM,QAAQ,CAACG,MAAM,EAAEH,QAAQ,CAACI,UAAU,CAAC;MAClE,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACG,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMnC,OAAO,GAAG,MAAMgC,QAAQ,CAACM,IAAI,CAAC,CAAC;IACrCpC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,OAAO,CAACd,MAAM,EAAE,OAAO,CAAC;;IAEpE;IACA,MAAMqD,YAAY,GAAGvC,OAAO,CAACc,IAAI,CAAC,CAAC,CAAC0B,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IAE1D,MAAMvC,OAAO,GAAGF,QAAQ,CAACwC,YAAY,CAAC;IACtCrC,OAAO,CAACC,GAAG,CAAC,GAAGF,OAAO,CAACf,MAAM,oCAAoC,EAAEe,OAAO,CAAC;IAE3E,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOyB,KAAK,EAAE;IACdxB,OAAO,CAACwB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMe,eAAe,GAAIxC,OAAO,IAAK;EAC1C,IAAI,CAACA,OAAO,IAAIA,OAAO,CAACf,MAAM,KAAK,CAAC,EAAE;IACpCgB,OAAO,CAACwB,KAAK,CAAC,4BAA4B,CAAC;IAC3C,OAAO,IAAI;EACb;EACA,MAAMgB,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG5C,OAAO,CAACf,MAAM,CAAC;EAC9D,MAAM4D,cAAc,GAAG7C,OAAO,CAACyC,WAAW,CAAC;EAC3CxC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE2C,cAAc,CAAC;EACnD,OAAOA,cAAc;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}