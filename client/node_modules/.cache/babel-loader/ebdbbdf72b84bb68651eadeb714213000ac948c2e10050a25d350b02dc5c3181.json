{"ast":null,"code":"import { Chess } from 'chess.js';\nconst parsePGN = pgnText => {\n  const puzzles = [];\n  const games = pgnText.split('\\n\\n[Event');\n  games.forEach((game, index) => {\n    if (index === 0 && !game.startsWith('[Event')) {\n      game = '[Event' + game;\n    }\n    try {\n      // Extraer FEN y solución\n      const fenMatch = game.match(/\\[FEN \"(.*?)\"\\]/);\n      const solutionMatch = game.match(/\\[Solution \"(.*?)\"\\]/);\n      if (fenMatch && solutionMatch) {\n        const fen = fenMatch[1];\n        const solution = solutionMatch[1].split(/\\d+\\.\\s+/).filter(move => move.trim()).flatMap(move => move.split(/\\s+/)).filter(move => move.trim() && !move.includes('#'));\n\n        // Verificar que la posición FEN es válida\n        const chess = new Chess();\n        if (chess.load(fen)) {\n          puzzles.push({\n            id: index + 1,\n            fen: fen,\n            solution: solution,\n            turnToPlay: fen.includes(' w ') ? 'w' : 'b'\n          });\n          console.log(`Puzzle ${index + 1} cargado:`, {\n            fen: fen,\n            solution: solution\n          });\n        }\n      }\n    } catch (error) {\n      console.error(`Error al procesar puzzle ${index + 1}:`, error);\n    }\n  });\n  return puzzles;\n};\nexport const loadPuzzlesFromPGN = async () => {\n  try {\n    console.log('Cargando puzzles...');\n    const response = await fetch('/data/puzzles/mate-en-dos-processed.pgn');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const pgnText = await response.text();\n    console.log('Archivo PGN cargado, procesando puzzles...');\n    const puzzles = parsePGN(pgnText);\n    console.log(`${puzzles.length} puzzles procesados correctamente`);\n    return puzzles;\n  } catch (error) {\n    console.error('Error loading puzzles:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["Chess","parsePGN","pgnText","puzzles","games","split","forEach","game","index","startsWith","fenMatch","match","solutionMatch","fen","solution","filter","move","trim","flatMap","includes","chess","load","push","id","turnToPlay","console","log","error","loadPuzzlesFromPGN","response","fetch","ok","Error","status","text","length"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/services/puzzleService.js"],"sourcesContent":["import { Chess } from 'chess.js';\r\n\r\nconst parsePGN = (pgnText) => {\r\n  const puzzles = [];\r\n  const games = pgnText.split('\\n\\n[Event');\r\n  \r\n  games.forEach((game, index) => {\r\n    if (index === 0 && !game.startsWith('[Event')) {\r\n      game = '[Event' + game;\r\n    }\r\n    \r\n    try {\r\n      // Extraer FEN y solución\r\n      const fenMatch = game.match(/\\[FEN \"(.*?)\"\\]/);\r\n      const solutionMatch = game.match(/\\[Solution \"(.*?)\"\\]/);\r\n      \r\n      if (fenMatch && solutionMatch) {\r\n        const fen = fenMatch[1];\r\n        const solution = solutionMatch[1]\r\n          .split(/\\d+\\.\\s+/)\r\n          .filter(move => move.trim())\r\n          .flatMap(move => move.split(/\\s+/))\r\n          .filter(move => move.trim() && !move.includes('#'));\r\n\r\n        // Verificar que la posición FEN es válida\r\n        const chess = new Chess();\r\n        if (chess.load(fen)) {\r\n          puzzles.push({\r\n            id: index + 1,\r\n            fen: fen,\r\n            solution: solution,\r\n            turnToPlay: fen.includes(' w ') ? 'w' : 'b'\r\n          });\r\n          console.log(`Puzzle ${index + 1} cargado:`, {\r\n            fen: fen,\r\n            solution: solution\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error al procesar puzzle ${index + 1}:`, error);\r\n    }\r\n  });\r\n  \r\n  return puzzles;\r\n};\r\n\r\nexport const loadPuzzlesFromPGN = async () => {\r\n  try {\r\n    console.log('Cargando puzzles...');\r\n    const response = await fetch('/data/puzzles/mate-en-dos-processed.pgn');\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const pgnText = await response.text();\r\n    console.log('Archivo PGN cargado, procesando puzzles...');\r\n    const puzzles = parsePGN(pgnText);\r\n    console.log(`${puzzles.length} puzzles procesados correctamente`);\r\n    return puzzles;\r\n  } catch (error) {\r\n    console.error('Error loading puzzles:', error);\r\n    return [];\r\n  }\r\n};"],"mappings":"AAAA,SAASA,KAAK,QAAQ,UAAU;AAEhC,MAAMC,QAAQ,GAAIC,OAAO,IAAK;EAC5B,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,KAAK,GAAGF,OAAO,CAACG,KAAK,CAAC,YAAY,CAAC;EAEzCD,KAAK,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC7B,IAAIA,KAAK,KAAK,CAAC,IAAI,CAACD,IAAI,CAACE,UAAU,CAAC,QAAQ,CAAC,EAAE;MAC7CF,IAAI,GAAG,QAAQ,GAAGA,IAAI;IACxB;IAEA,IAAI;MACF;MACA,MAAMG,QAAQ,GAAGH,IAAI,CAACI,KAAK,CAAC,iBAAiB,CAAC;MAC9C,MAAMC,aAAa,GAAGL,IAAI,CAACI,KAAK,CAAC,sBAAsB,CAAC;MAExD,IAAID,QAAQ,IAAIE,aAAa,EAAE;QAC7B,MAAMC,GAAG,GAAGH,QAAQ,CAAC,CAAC,CAAC;QACvB,MAAMI,QAAQ,GAAGF,aAAa,CAAC,CAAC,CAAC,CAC9BP,KAAK,CAAC,UAAU,CAAC,CACjBU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAC3BC,OAAO,CAACF,IAAI,IAAIA,IAAI,CAACX,KAAK,CAAC,KAAK,CAAC,CAAC,CAClCU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,IAAI,CAACD,IAAI,CAACG,QAAQ,CAAC,GAAG,CAAC,CAAC;;QAErD;QACA,MAAMC,KAAK,GAAG,IAAIpB,KAAK,CAAC,CAAC;QACzB,IAAIoB,KAAK,CAACC,IAAI,CAACR,GAAG,CAAC,EAAE;UACnBV,OAAO,CAACmB,IAAI,CAAC;YACXC,EAAE,EAAEf,KAAK,GAAG,CAAC;YACbK,GAAG,EAAEA,GAAG;YACRC,QAAQ,EAAEA,QAAQ;YAClBU,UAAU,EAAEX,GAAG,CAACM,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG;UAC1C,CAAC,CAAC;UACFM,OAAO,CAACC,GAAG,CAAC,UAAUlB,KAAK,GAAG,CAAC,WAAW,EAAE;YAC1CK,GAAG,EAAEA,GAAG;YACRC,QAAQ,EAAEA;UACZ,CAAC,CAAC;QACJ;MACF;IACF,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,4BAA4BnB,KAAK,GAAG,CAAC,GAAG,EAAEmB,KAAK,CAAC;IAChE;EACF,CAAC,CAAC;EAEF,OAAOxB,OAAO;AAChB,CAAC;AAED,OAAO,MAAMyB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACFH,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,CAAC;IACvE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IACA,MAAM/B,OAAO,GAAG,MAAM2B,QAAQ,CAACK,IAAI,CAAC,CAAC;IACrCT,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;IACzD,MAAMvB,OAAO,GAAGF,QAAQ,CAACC,OAAO,CAAC;IACjCuB,OAAO,CAACC,GAAG,CAAC,GAAGvB,OAAO,CAACgC,MAAM,mCAAmC,CAAC;IACjE,OAAOhC,OAAO;EAChB,CAAC,CAAC,OAAOwB,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}