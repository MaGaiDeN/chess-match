{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\magai\\\\Desktop\\\\chess-match\\\\client\\\\src\\\\components\\\\Chessboard\\\\Chessboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport { loadPuzzles, getRandomPuzzle } from '../../services/puzzleService';\nimport './Chessboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessboardComponent = ({\n  onPuzzleMessage\n}) => {\n  _s();\n  const [game, setGame] = useState(new Chess());\n  const [currentPuzzle, setCurrentPuzzle] = useState(null);\n  const [solutionIndex, setSolutionIndex] = useState(0);\n  useEffect(() => {\n    loadRandomPuzzle();\n  }, []);\n  const loadRandomPuzzle = async () => {\n    try {\n      const puzzles = await loadPuzzles();\n      if (puzzles && puzzles.length > 0) {\n        const puzzle = getRandomPuzzle(puzzles);\n        if (!puzzle) {\n          console.error('No se pudo cargar el puzzle');\n          return;\n        }\n        const newGame = new Chess();\n        puzzle.moves.forEach(move => {\n          newGame.move(move);\n        });\n        setGame(newGame);\n        setCurrentPuzzle(puzzle);\n        setSolutionIndex(0);\n        const movesForMate = Math.ceil(puzzle.solution.length / 2);\n        onPuzzleMessage(`Tu turno - Encuentra el mate en ${movesForMate}`);\n      }\n    } catch (error) {\n      console.error('Error al cargar el puzzle:', error);\n    }\n  };\n  const onDrop = (sourceSquare, targetSquare) => {\n    try {\n      const move = game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: 'q'\n      });\n      if (move === null) return false;\n\n      // Verificar si el movimiento es correcto\n      if (currentPuzzle && currentPuzzle.solution[solutionIndex] === move.san) {\n        onPuzzleMessage('¡Correcto! Espera la respuesta...');\n\n        // Hacer el movimiento de respuesta del oponente después de un pequeño delay\n        setTimeout(() => {\n          const opponentMove = currentPuzzle.solution[solutionIndex + 1];\n          game.move(opponentMove);\n          setGame(new Chess(game.fen()));\n          setSolutionIndex(solutionIndex + 2);\n\n          // Verificar si el puzzle está completado\n          if (solutionIndex + 2 >= currentPuzzle.solution.length) {\n            onPuzzleMessage('¡Puzzle completado! Cargando nuevo puzzle...');\n            setTimeout(loadRandomPuzzle, 2000);\n          } else {\n            onPuzzleMessage('Tu turno - Continúa con el mate');\n          }\n        }, 500);\n      } else {\n        // Movimiento incorrecto\n        game.undo();\n        onPuzzleMessage('Movimiento incorrecto. Intenta de nuevo');\n        return false;\n      }\n      return true;\n    } catch (error) {\n      console.error('Error al mover:', error);\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardWidth: 400,\n        customDragLayer: false,\n        boardOrientation: (currentPuzzle === null || currentPuzzle === void 0 ? void 0 : currentPuzzle.turnToPlay) === 'b' ? 'black' : 'white'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessboardComponent, \"2TigcMrQDOfl5BDXZVqt4QRzeoA=\");\n_c = ChessboardComponent;\nexport default ChessboardComponent;\nvar _c;\n$RefreshReg$(_c, \"ChessboardComponent\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","loadPuzzles","getRandomPuzzle","jsxDEV","_jsxDEV","ChessboardComponent","onPuzzleMessage","_s","game","setGame","currentPuzzle","setCurrentPuzzle","solutionIndex","setSolutionIndex","loadRandomPuzzle","puzzles","length","puzzle","console","error","newGame","moves","forEach","move","movesForMate","Math","ceil","solution","onDrop","sourceSquare","targetSquare","from","to","promotion","san","setTimeout","opponentMove","fen","undo","className","children","position","onPieceDrop","boardWidth","customDragLayer","boardOrientation","turnToPlay","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/components/Chessboard/Chessboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Chessboard } from 'react-chessboard';\r\nimport { Chess } from 'chess.js';\r\nimport { loadPuzzles, getRandomPuzzle } from '../../services/puzzleService';\r\nimport './Chessboard.css';\r\n\r\nconst ChessboardComponent = ({ onPuzzleMessage }) => {\r\n  const [game, setGame] = useState(new Chess());\r\n  const [currentPuzzle, setCurrentPuzzle] = useState(null);\r\n  const [solutionIndex, setSolutionIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    loadRandomPuzzle();\r\n  }, []);\r\n\r\n  const loadRandomPuzzle = async () => {\r\n    try {\r\n      const puzzles = await loadPuzzles();\r\n      if (puzzles && puzzles.length > 0) {\r\n        const puzzle = getRandomPuzzle(puzzles);\r\n        if (!puzzle) {\r\n          console.error('No se pudo cargar el puzzle');\r\n          return;\r\n        }\r\n\r\n        const newGame = new Chess();\r\n        puzzle.moves.forEach(move => {\r\n          newGame.move(move);\r\n        });\r\n        \r\n        setGame(newGame);\r\n        setCurrentPuzzle(puzzle);\r\n        setSolutionIndex(0);\r\n        \r\n        const movesForMate = Math.ceil(puzzle.solution.length / 2);\r\n        onPuzzleMessage(`Tu turno - Encuentra el mate en ${movesForMate}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al cargar el puzzle:', error);\r\n    }\r\n  };\r\n\r\n  const onDrop = (sourceSquare, targetSquare) => {\r\n    try {\r\n      const move = game.move({\r\n        from: sourceSquare,\r\n        to: targetSquare,\r\n        promotion: 'q'\r\n      });\r\n\r\n      if (move === null) return false;\r\n\r\n      // Verificar si el movimiento es correcto\r\n      if (currentPuzzle && currentPuzzle.solution[solutionIndex] === move.san) {\r\n        onPuzzleMessage('¡Correcto! Espera la respuesta...');\r\n        \r\n        // Hacer el movimiento de respuesta del oponente después de un pequeño delay\r\n        setTimeout(() => {\r\n          const opponentMove = currentPuzzle.solution[solutionIndex + 1];\r\n          game.move(opponentMove);\r\n          setGame(new Chess(game.fen()));\r\n          setSolutionIndex(solutionIndex + 2);\r\n\r\n          // Verificar si el puzzle está completado\r\n          if (solutionIndex + 2 >= currentPuzzle.solution.length) {\r\n            onPuzzleMessage('¡Puzzle completado! Cargando nuevo puzzle...');\r\n            setTimeout(loadRandomPuzzle, 2000);\r\n          } else {\r\n            onPuzzleMessage('Tu turno - Continúa con el mate');\r\n          }\r\n        }, 500);\r\n      } else {\r\n        // Movimiento incorrecto\r\n        game.undo();\r\n        onPuzzleMessage('Movimiento incorrecto. Intenta de nuevo');\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error al mover:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chessboard-container\">\r\n      <div className=\"board-wrapper\">\r\n        <Chessboard \r\n          position={game.fen()}\r\n          onPieceDrop={onDrop}\r\n          boardWidth={400}\r\n          customDragLayer={false}\r\n          boardOrientation={currentPuzzle?.turnToPlay === 'b' ? 'black' : 'white'}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessboardComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}