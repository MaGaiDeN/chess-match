{"ast":null,"code":"import { Chess } from 'chess.js';\nconst parsePGN = pgnText => {\n  const puzzles = [];\n  console.log('Iniciando procesamiento de PGN...');\n\n  // Dividir por puzzles (dos saltos de línea)\n  const games = pgnText.split('\\n\\n[Event');\n  console.log(`Encontrados ${games.length} puzzles para procesar`);\n  games.forEach((game, index) => {\n    try {\n      // Añadir [Event de vuelta al inicio si no es el primer puzzle\n      const puzzleText = index === 0 ? game : '[Event' + game;\n      console.log(`Procesando puzzle ${index + 1}:`, puzzleText.substring(0, 100));\n\n      // Extraer datos usando expresiones regulares\n      const eventMatch = puzzleText.match(/\\[Event \"([^\"]+)\"\\]/);\n      const fenMatch = puzzleText.match(/\\[FEN \"([^\"]+)\"\\]/);\n      const solutionMatch = puzzleText.match(/\\[Solution \"([^\"]+)\"\\]/);\n      if (eventMatch && fenMatch && solutionMatch) {\n        const event = eventMatch[1];\n        const fen = fenMatch[1];\n        const solutionText = solutionMatch[1];\n\n        // Procesar la solución\n        const solution = solutionText.split(' ').map(move => move.endsWith('#') ? move.slice(0, -1) : move);\n\n        // Verificar FEN\n        const chess = new Chess();\n        if (chess.load(fen)) {\n          const puzzle = {\n            id: index + 1,\n            event: event,\n            fen: fen,\n            solution: solution,\n            isMate: true,\n            turnToPlay: 'w'\n          };\n          puzzles.push(puzzle);\n          console.log(`Puzzle ${index + 1} procesado correctamente:`, puzzle);\n        } else {\n          console.error(`FEN inválido en puzzle ${index + 1}:`, fen);\n        }\n      } else {\n        console.error(`Datos faltantes en puzzle ${index + 1}:`, {\n          event: !!eventMatch,\n          fen: !!fenMatch,\n          solution: !!solutionMatch\n        });\n      }\n    } catch (error) {\n      console.error(`Error al procesar puzzle ${index + 1}:`, error);\n    }\n  });\n  return puzzles;\n};\nexport const loadPuzzlesFromPGN = async () => {\n  try {\n    console.log('Cargando archivo de puzzles...');\n    const response = await fetch('/data/puzzles/mate-en-dos-processed.pgn');\n    if (!response.ok) {\n      console.error('Error HTTP:', response.status, response.statusText);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const pgnText = await response.text();\n    console.log('Archivo PGN cargado, tamaño:', pgnText.length, 'bytes');\n    console.log('Primeros 200 caracteres:', pgnText.substring(0, 200));\n    const puzzles = parsePGN(pgnText);\n    console.log(`${puzzles.length} puzzles procesados correctamente`);\n    return puzzles;\n  } catch (error) {\n    console.error('Error loading puzzles:', error);\n    return [];\n  }\n};\nexport const getRandomPuzzle = puzzles => {\n  if (!puzzles || puzzles.length === 0) {\n    console.error('No hay puzzles disponibles');\n    return null;\n  }\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\n  const selectedPuzzle = puzzles[randomIndex];\n  console.log('Puzzle seleccionado:', selectedPuzzle);\n  return selectedPuzzle;\n};","map":{"version":3,"names":["Chess","parsePGN","pgnText","puzzles","console","log","games","split","length","forEach","game","index","puzzleText","substring","eventMatch","match","fenMatch","solutionMatch","event","fen","solutionText","solution","map","move","endsWith","slice","chess","load","puzzle","id","isMate","turnToPlay","push","error","loadPuzzlesFromPGN","response","fetch","ok","status","statusText","Error","text","getRandomPuzzle","randomIndex","Math","floor","random","selectedPuzzle"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/services/puzzleService.js"],"sourcesContent":["import { Chess } from 'chess.js';\r\n\r\nconst parsePGN = (pgnText) => {\r\n  const puzzles = [];\r\n  console.log('Iniciando procesamiento de PGN...');\r\n  \r\n  // Dividir por puzzles (dos saltos de línea)\r\n  const games = pgnText.split('\\n\\n[Event');\r\n  console.log(`Encontrados ${games.length} puzzles para procesar`);\r\n  \r\n  games.forEach((game, index) => {\r\n    try {\r\n      // Añadir [Event de vuelta al inicio si no es el primer puzzle\r\n      const puzzleText = index === 0 ? game : '[Event' + game;\r\n      console.log(`Procesando puzzle ${index + 1}:`, puzzleText.substring(0, 100));\r\n      \r\n      // Extraer datos usando expresiones regulares\r\n      const eventMatch = puzzleText.match(/\\[Event \"([^\"]+)\"\\]/);\r\n      const fenMatch = puzzleText.match(/\\[FEN \"([^\"]+)\"\\]/);\r\n      const solutionMatch = puzzleText.match(/\\[Solution \"([^\"]+)\"\\]/);\r\n      \r\n      if (eventMatch && fenMatch && solutionMatch) {\r\n        const event = eventMatch[1];\r\n        const fen = fenMatch[1];\r\n        const solutionText = solutionMatch[1];\r\n        \r\n        // Procesar la solución\r\n        const solution = solutionText\r\n          .split(' ')\r\n          .map(move => move.endsWith('#') ? move.slice(0, -1) : move);\r\n        \r\n        // Verificar FEN\r\n        const chess = new Chess();\r\n        if (chess.load(fen)) {\r\n          const puzzle = {\r\n            id: index + 1,\r\n            event: event,\r\n            fen: fen,\r\n            solution: solution,\r\n            isMate: true,\r\n            turnToPlay: 'w'\r\n          };\r\n          puzzles.push(puzzle);\r\n          console.log(`Puzzle ${index + 1} procesado correctamente:`, puzzle);\r\n        } else {\r\n          console.error(`FEN inválido en puzzle ${index + 1}:`, fen);\r\n        }\r\n      } else {\r\n        console.error(`Datos faltantes en puzzle ${index + 1}:`, {\r\n          event: !!eventMatch,\r\n          fen: !!fenMatch,\r\n          solution: !!solutionMatch\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error al procesar puzzle ${index + 1}:`, error);\r\n    }\r\n  });\r\n  \r\n  return puzzles;\r\n};\r\n\r\nexport const loadPuzzlesFromPGN = async () => {\r\n  try {\r\n    console.log('Cargando archivo de puzzles...');\r\n    const response = await fetch('/data/puzzles/mate-en-dos-processed.pgn');\r\n    \r\n    if (!response.ok) {\r\n      console.error('Error HTTP:', response.status, response.statusText);\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const pgnText = await response.text();\r\n    console.log('Archivo PGN cargado, tamaño:', pgnText.length, 'bytes');\r\n    console.log('Primeros 200 caracteres:', pgnText.substring(0, 200));\r\n    \r\n    const puzzles = parsePGN(pgnText);\r\n    console.log(`${puzzles.length} puzzles procesados correctamente`);\r\n    \r\n    return puzzles;\r\n  } catch (error) {\r\n    console.error('Error loading puzzles:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getRandomPuzzle = (puzzles) => {\r\n  if (!puzzles || puzzles.length === 0) {\r\n    console.error('No hay puzzles disponibles');\r\n    return null;\r\n  }\r\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\r\n  const selectedPuzzle = puzzles[randomIndex];\r\n  console.log('Puzzle seleccionado:', selectedPuzzle);\r\n  return selectedPuzzle;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}