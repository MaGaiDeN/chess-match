{"ast":null,"code":"import React,{useState,useEffect,useCallback,useRef}from'react';import{Chessboard}from'react-chessboard';import{Chess}from'chess.js';import{loadPuzzlesFromPGN}from'../../services/puzzleService';import'./Chessboard.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChessboardComponent=()=>{const initialPositionRef=useRef(null);const[position,setPosition]=useState(null);const[currentPuzzle,setCurrentPuzzle]=useState(null);const[solutionIndex,setSolutionIndex]=useState(0);const[isComplete,setIsComplete]=useState(false);const[message,setMessage]=useState('Cargando puzzle...');const gameRef=useRef(new Chess());const loadRandomPuzzle=useCallback(async()=>{try{const puzzles=await loadPuzzlesFromPGN();if(puzzles&&puzzles.length>0){const randomIndex=Math.floor(Math.random()*puzzles.length);const puzzle=puzzles[randomIndex];console.log(`Cargando puzzle ${randomIndex+1} de ${puzzles.length}:`,puzzle);const game=new Chess();const fen=puzzle.fen.trim();console.log('FEN a cargar:',fen);game.load(fen);const resultingFen=game.fen();console.log('FEN cargado:',resultingFen);gameRef.current=game;initialPositionRef.current=resultingFen;setPosition(resultingFen);console.log('Nueva posición establecida:',resultingFen);setCurrentPuzzle(puzzle);setSolutionIndex(0);setIsComplete(false);setMessage(`Tu turno - ${puzzle.isMate?'Encuentra el mate':'Encuentra la mejor jugada'}`);}}catch(error){console.error('Error cargando puzzle:',error);setMessage('Error al cargar el puzzle');}},[]);useEffect(()=>{loadRandomPuzzle();},[loadRandomPuzzle]);useEffect(()=>{if(position===null&&initialPositionRef.current){console.log('Restaurando posición inicial:',initialPositionRef.current);setPosition(initialPositionRef.current);}},[position]);if(!position){return/*#__PURE__*/_jsx(\"div\",{children:\"Cargando...\"});}const onDrop=(sourceSquare,targetSquare)=>{if(isComplete)return false;try{const move=gameRef.current.move({from:sourceSquare,to:targetSquare,promotion:'q'});if(!move)return false;const expectedMove=currentPuzzle.solution[solutionIndex].replace('#','');const actualMove=move.san.replace('#','');console.log('Movimiento esperado:',expectedMove);console.log('Movimiento realizado:',actualMove);if(actualMove===expectedMove){setPosition(gameRef.current.fen());if(solutionIndex===currentPuzzle.solution.length-1){setIsComplete(true);setMessage('¡Excelente! ¡Has encontrado el mate! 🎉');return true;}setMessage('¡Correcto! Espera la respuesta...');setTimeout(()=>{const opponentMove=currentPuzzle.solution[solutionIndex+1];if(opponentMove){gameRef.current.move(opponentMove.replace('#',''));setPosition(gameRef.current.fen());setSolutionIndex(prev=>prev+2);setMessage('Tu turno - Da mate');}},500);return true;}gameRef.current.undo();setMessage('Movimiento incorrecto. Intenta de nuevo');return false;}catch(error){console.error('Error en movimiento:',error);return false;}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chessboard-container\",children:[/*#__PURE__*/_jsx(Chessboard,{position:position,onPieceDrop:onDrop,boardOrientation:\"white\",arePremovesAllowed:false,customBoardStyle:{borderRadius:'4px',boxShadow:'0 2px 10px rgba(0, 0, 0, 0.5)'}}),/*#__PURE__*/_jsxs(\"div\",{className:\"puzzle-status\",children:[/*#__PURE__*/_jsx(\"p\",{className:isComplete?'success-message':'message',children:message}),currentPuzzle&&!isComplete&&/*#__PURE__*/_jsxs(\"p\",{className:\"move-counter\",children:[\"Movimiento \",Math.floor(solutionIndex/2)+1,\" de \",Math.ceil(currentPuzzle.solution.length/2)]}),isComplete&&/*#__PURE__*/_jsx(\"button\",{className:\"next-puzzle-button\",onClick:loadRandomPuzzle,children:\"Siguiente puzzle\"})]})]});};export default ChessboardComponent;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Chessboard","Chess","loadPuzzlesFromPGN","jsx","_jsx","jsxs","_jsxs","ChessboardComponent","initialPositionRef","position","setPosition","currentPuzzle","setCurrentPuzzle","solutionIndex","setSolutionIndex","isComplete","setIsComplete","message","setMessage","gameRef","loadRandomPuzzle","puzzles","length","randomIndex","Math","floor","random","puzzle","console","log","game","fen","trim","load","resultingFen","current","isMate","error","children","onDrop","sourceSquare","targetSquare","move","from","to","promotion","expectedMove","solution","replace","actualMove","san","setTimeout","opponentMove","prev","undo","className","onPieceDrop","boardOrientation","arePremovesAllowed","customBoardStyle","borderRadius","boxShadow","ceil","onClick"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/components/Chessboard/Chessboard.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { Chessboard } from 'react-chessboard';\r\nimport { Chess } from 'chess.js';\r\nimport { loadPuzzlesFromPGN } from '../../services/puzzleService';\r\nimport './Chessboard.css';\r\n\r\nconst ChessboardComponent = () => {\r\n  const initialPositionRef = useRef(null);\r\n  const [position, setPosition] = useState(null);\r\n  const [currentPuzzle, setCurrentPuzzle] = useState(null);\r\n  const [solutionIndex, setSolutionIndex] = useState(0);\r\n  const [isComplete, setIsComplete] = useState(false);\r\n  const [message, setMessage] = useState('Cargando puzzle...');\r\n  \r\n  const gameRef = useRef(new Chess());\r\n\r\n  const loadRandomPuzzle = useCallback(async () => {\r\n    try {\r\n      const puzzles = await loadPuzzlesFromPGN();\r\n      \r\n      if (puzzles && puzzles.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * puzzles.length);\r\n        const puzzle = puzzles[randomIndex];\r\n        console.log(`Cargando puzzle ${randomIndex + 1} de ${puzzles.length}:`, puzzle);\r\n        \r\n        const game = new Chess();\r\n        const fen = puzzle.fen.trim();\r\n        console.log('FEN a cargar:', fen);\r\n        \r\n        game.load(fen);\r\n        const resultingFen = game.fen();\r\n        console.log('FEN cargado:', resultingFen);\r\n        \r\n        gameRef.current = game;\r\n        initialPositionRef.current = resultingFen;\r\n        setPosition(resultingFen);\r\n        console.log('Nueva posición establecida:', resultingFen);\r\n        \r\n        setCurrentPuzzle(puzzle);\r\n        setSolutionIndex(0);\r\n        setIsComplete(false);\r\n        setMessage(`Tu turno - ${puzzle.isMate ? 'Encuentra el mate' : 'Encuentra la mejor jugada'}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cargando puzzle:', error);\r\n      setMessage('Error al cargar el puzzle');\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadRandomPuzzle();\r\n  }, [loadRandomPuzzle]);\r\n\r\n  useEffect(() => {\r\n    if (position === null && initialPositionRef.current) {\r\n      console.log('Restaurando posición inicial:', initialPositionRef.current);\r\n      setPosition(initialPositionRef.current);\r\n    }\r\n  }, [position]);\r\n\r\n  if (!position) {\r\n    return <div>Cargando...</div>;\r\n  }\r\n\r\n  const onDrop = (sourceSquare, targetSquare) => {\r\n    if (isComplete) return false;\r\n\r\n    try {\r\n      const move = gameRef.current.move({\r\n        from: sourceSquare,\r\n        to: targetSquare,\r\n        promotion: 'q'\r\n      });\r\n\r\n      if (!move) return false;\r\n\r\n      const expectedMove = currentPuzzle.solution[solutionIndex].replace('#', '');\r\n      const actualMove = move.san.replace('#', '');\r\n      \r\n      console.log('Movimiento esperado:', expectedMove);\r\n      console.log('Movimiento realizado:', actualMove);\r\n\r\n      if (actualMove === expectedMove) {\r\n        setPosition(gameRef.current.fen());\r\n        \r\n        if (solutionIndex === currentPuzzle.solution.length - 1) {\r\n          setIsComplete(true);\r\n          setMessage('¡Excelente! ¡Has encontrado el mate! 🎉');\r\n          return true;\r\n        }\r\n\r\n        setMessage('¡Correcto! Espera la respuesta...');\r\n        \r\n        setTimeout(() => {\r\n          const opponentMove = currentPuzzle.solution[solutionIndex + 1];\r\n          if (opponentMove) {\r\n            gameRef.current.move(opponentMove.replace('#', ''));\r\n            setPosition(gameRef.current.fen());\r\n            setSolutionIndex(prev => prev + 2);\r\n            setMessage('Tu turno - Da mate');\r\n          }\r\n        }, 500);\r\n\r\n        return true;\r\n      }\r\n\r\n      gameRef.current.undo();\r\n      setMessage('Movimiento incorrecto. Intenta de nuevo');\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error en movimiento:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chessboard-container\">\r\n      <Chessboard \r\n        position={position}\r\n        onPieceDrop={onDrop}\r\n        boardOrientation=\"white\"\r\n        arePremovesAllowed={false}\r\n        customBoardStyle={{\r\n          borderRadius: '4px',\r\n          boxShadow: '0 2px 10px rgba(0, 0, 0, 0.5)'\r\n        }}\r\n      />\r\n      <div className=\"puzzle-status\">\r\n        <p className={isComplete ? 'success-message' : 'message'}>\r\n          {message}\r\n        </p>\r\n        {currentPuzzle && !isComplete && (\r\n          <p className=\"move-counter\">\r\n            Movimiento {Math.floor(solutionIndex/2) + 1} de {Math.ceil(currentPuzzle.solution.length/2)}\r\n          </p>\r\n        )}\r\n        {isComplete && (\r\n          <button \r\n            className=\"next-puzzle-button\"\r\n            onClick={loadRandomPuzzle}\r\n          >\r\n            Siguiente puzzle\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessboardComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}