{"ast":null,"code":"import { Chess } from 'chess.js';\nconst parsePGN = pgnText => {\n  try {\n    console.log('Iniciando parseo de PGN...');\n    const lines = pgnText.split('\\n');\n    const puzzles = [];\n    let currentPuzzle = {};\n    for (const line of lines) {\n      if (line.startsWith('[Event ')) {\n        currentPuzzle.event = line.match(/\"([^\"]+)\"/)[1];\n      } else if (line.startsWith('[FEN ')) {\n        currentPuzzle.fen = line.match(/\"([^\"]+)\"/)[1];\n      } else if (line.trim() && !line.startsWith('[')) {\n        // Procesar movimientos\n        const moves = line.trim().split(/\\s+/);\n        currentPuzzle.solution = moves.filter(move => move && !move.includes('.') && move !== '1-0' && move !== '0-1' && move !== '1/2-1/2');\n        currentPuzzle.id = puzzles.length + 1;\n        currentPuzzle.isMate = currentPuzzle.solution.some(move => move.includes('#'));\n        puzzles.push({\n          ...currentPuzzle\n        });\n        currentPuzzle = {};\n      }\n    }\n    console.log('Puzzles parseados:', puzzles);\n    return puzzles;\n  } catch (error) {\n    console.error('Error parseando PGN:', error);\n    return [];\n  }\n};\nexport const loadPuzzlesFromPGN = async () => {\n  try {\n    console.log('Cargando archivo de puzzles...');\n    const puzzlePath = process.env.PUBLIC_URL + '/data/puzzles/mate-en-dos-processed.pgn';\n    const response = await fetch(puzzlePath);\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n    const pgnText = await response.text();\n    console.log('Contenido PGN:', pgnText); // Añadir este log\n\n    const puzzles = parsePGN(pgnText);\n    console.log('Puzzles antes de validación:', puzzles);\n\n    // Validar cada puzzle\n    const validPuzzles = puzzles.filter(puzzle => {\n      if (!puzzle.fen) {\n        console.error('Puzzle sin FEN:', puzzle);\n        return false;\n      }\n      try {\n        const chess = new Chess();\n        const isValid = chess.load(puzzle.fen);\n        if (!isValid) {\n          console.error('FEN inválido:', puzzle.fen);\n          return false;\n        }\n        return true;\n      } catch (error) {\n        console.error('Error validando puzzle:', puzzle, error);\n        return false;\n      }\n    });\n    console.log('Puzzles válidos:', validPuzzles);\n    return validPuzzles;\n  } catch (error) {\n    console.error('Error cargando puzzles:', error);\n    return [];\n  }\n};\nexport const getRandomPuzzle = puzzles => {\n  if (!puzzles || puzzles.length === 0) {\n    console.error('No hay puzzles disponibles');\n    return null;\n  }\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\n  const selectedPuzzle = puzzles[randomIndex];\n  console.log('Puzzle seleccionado:', selectedPuzzle);\n  return selectedPuzzle;\n};","map":{"version":3,"names":["Chess","parsePGN","pgnText","console","log","lines","split","puzzles","currentPuzzle","line","startsWith","event","match","fen","trim","moves","solution","filter","move","includes","id","length","isMate","some","push","error","loadPuzzlesFromPGN","puzzlePath","process","env","PUBLIC_URL","response","fetch","ok","Error","status","text","validPuzzles","puzzle","chess","isValid","load","getRandomPuzzle","randomIndex","Math","floor","random","selectedPuzzle"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/services/puzzleService.js"],"sourcesContent":["import { Chess } from 'chess.js';\r\n\r\nconst parsePGN = (pgnText) => {\r\n  try {\r\n    console.log('Iniciando parseo de PGN...');\r\n    const lines = pgnText.split('\\n');\r\n    const puzzles = [];\r\n    let currentPuzzle = {};\r\n\r\n    for (const line of lines) {\r\n      if (line.startsWith('[Event ')) {\r\n        currentPuzzle.event = line.match(/\"([^\"]+)\"/)[1];\r\n      } else if (line.startsWith('[FEN ')) {\r\n        currentPuzzle.fen = line.match(/\"([^\"]+)\"/)[1];\r\n      } else if (line.trim() && !line.startsWith('[')) {\r\n        // Procesar movimientos\r\n        const moves = line.trim().split(/\\s+/);\r\n        currentPuzzle.solution = moves.filter(move => \r\n          move && !move.includes('.') && move !== '1-0' && move !== '0-1' && move !== '1/2-1/2'\r\n        );\r\n        currentPuzzle.id = puzzles.length + 1;\r\n        currentPuzzle.isMate = currentPuzzle.solution.some(move => move.includes('#'));\r\n        puzzles.push({...currentPuzzle});\r\n        currentPuzzle = {};\r\n      }\r\n    }\r\n\r\n    console.log('Puzzles parseados:', puzzles);\r\n    return puzzles;\r\n  } catch (error) {\r\n    console.error('Error parseando PGN:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const loadPuzzlesFromPGN = async () => {\r\n  try {\r\n    console.log('Cargando archivo de puzzles...');\r\n    const puzzlePath = process.env.PUBLIC_URL + '/data/puzzles/mate-en-dos-processed.pgn';\r\n    \r\n    const response = await fetch(puzzlePath);\r\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n    \r\n    const pgnText = await response.text();\r\n    console.log('Contenido PGN:', pgnText); // Añadir este log\r\n    \r\n    const puzzles = parsePGN(pgnText);\r\n    console.log('Puzzles antes de validación:', puzzles);\r\n    \r\n    // Validar cada puzzle\r\n    const validPuzzles = puzzles.filter(puzzle => {\r\n      if (!puzzle.fen) {\r\n        console.error('Puzzle sin FEN:', puzzle);\r\n        return false;\r\n      }\r\n      \r\n      try {\r\n        const chess = new Chess();\r\n        const isValid = chess.load(puzzle.fen);\r\n        if (!isValid) {\r\n          console.error('FEN inválido:', puzzle.fen);\r\n          return false;\r\n        }\r\n        return true;\r\n      } catch (error) {\r\n        console.error('Error validando puzzle:', puzzle, error);\r\n        return false;\r\n      }\r\n    });\r\n\r\n    console.log('Puzzles válidos:', validPuzzles);\r\n    return validPuzzles;\r\n  } catch (error) {\r\n    console.error('Error cargando puzzles:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getRandomPuzzle = (puzzles) => {\r\n  if (!puzzles || puzzles.length === 0) {\r\n    console.error('No hay puzzles disponibles');\r\n    return null;\r\n  }\r\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\r\n  const selectedPuzzle = puzzles[randomIndex];\r\n  console.log('Puzzle seleccionado:', selectedPuzzle);\r\n  return selectedPuzzle;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}