{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\magai\\\\Desktop\\\\chess-match\\\\client\\\\src\\\\components\\\\Chessboard\\\\Chessboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport { loadPuzzlesFromPGN } from '../../services/puzzleService';\nimport './Chessboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessboardComponent = ({\n  onPuzzleMessage\n}) => {\n  _s();\n  const [game, setGame] = useState(new Chess());\n  const [currentPuzzle, setCurrentPuzzle] = useState(null);\n  const [solutionIndex, setSolutionIndex] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedSquare, setSelectedSquare] = useState('');\n  const isFirstRender = useRef(true);\n  useEffect(() => {\n    if (isFirstRender.current) {\n      console.log('Primera carga del componente');\n      loadRandomPuzzle();\n      isFirstRender.current = false;\n    }\n  }, []);\n  const loadRandomPuzzle = async () => {\n    console.log('A. Iniciando carga de puzzle');\n    setIsLoading(true);\n    try {\n      const puzzles = await loadPuzzlesFromPGN();\n      console.log('B. Puzzles recibidos:', puzzles);\n      if (puzzles && puzzles.length > 0) {\n        const randomIndex = Math.floor(Math.random() * puzzles.length);\n        const puzzle = puzzles[randomIndex];\n        console.log('C. Puzzle seleccionado:', puzzle);\n        const newGame = new Chess(puzzle.fen);\n        console.log('D. Posición cargada:', newGame.fen());\n        setGame(newGame);\n        setCurrentPuzzle(puzzle);\n        setSolutionIndex(0);\n        setSelectedSquare(prev => prev + 1);\n        onPuzzleMessage(`Tu turno - Encuentra el mate en 2`);\n      }\n    } catch (error) {\n      console.error('Error en loadRandomPuzzle:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const onDrop = (sourceSquare, targetSquare) => {\n    if (!game || isLoading) return false;\n    try {\n      const gameCopy = new Chess(game.fen());\n      const move = gameCopy.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: 'q'\n      });\n      if (move === null) return false;\n\n      // Convertir el movimiento a notación algebraica para comparar\n      const expectedMove = currentPuzzle.solution[solutionIndex];\n      console.log('Comparando movimientos:', {\n        realizado: move.san,\n        esperado: expectedMove\n      });\n      if (move.san === expectedMove.replace('#', '')) {\n        setGame(gameCopy);\n        onPuzzleMessage('¡Correcto! Espera la respuesta...');\n\n        // Si es mate, cargar nuevo puzzle\n        if (expectedMove.includes('#')) {\n          onPuzzleMessage('¡Excelente! ¡Mate! Cargando nuevo puzzle...');\n          setTimeout(loadRandomPuzzle, 1500);\n          return true;\n        }\n\n        // Respuesta del oponente\n        setTimeout(() => {\n          const opponentMove = currentPuzzle.solution[solutionIndex + 1];\n          if (!opponentMove) return;\n          const oppGame = new Chess(gameCopy.fen());\n          const result = oppGame.move(opponentMove);\n          if (result) {\n            setGame(oppGame);\n            setSolutionIndex(prev => prev + 2);\n            onPuzzleMessage('Tu turno - Continúa con el mate');\n          }\n        }, 500);\n        return true;\n      }\n      onPuzzleMessage('Movimiento incorrecto. Intenta de nuevo');\n      return false;\n    } catch (error) {\n      console.error('Error al mover:', error);\n      return false;\n    }\n  };\n  if (isLoading || !game) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando puzzle...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-wrapper\",\n      children: game && /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardWidth: 400,\n        customDragLayer: false,\n        boardOrientation: (currentPuzzle === null || currentPuzzle === void 0 ? void 0 : currentPuzzle.turnToPlay) === 'b' ? 'black' : 'white'\n      }, selectedSquare, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessboardComponent, \"OynzEYMJCoC6QjweIVjoAunUm0I=\");\n_c = ChessboardComponent;\nexport default ChessboardComponent;\nvar _c;\n$RefreshReg$(_c, \"ChessboardComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Chessboard","Chess","loadPuzzlesFromPGN","jsxDEV","_jsxDEV","ChessboardComponent","onPuzzleMessage","_s","game","setGame","currentPuzzle","setCurrentPuzzle","solutionIndex","setSolutionIndex","isLoading","setIsLoading","selectedSquare","setSelectedSquare","isFirstRender","current","console","log","loadRandomPuzzle","puzzles","length","randomIndex","Math","floor","random","puzzle","newGame","fen","prev","error","onDrop","sourceSquare","targetSquare","gameCopy","move","from","to","promotion","expectedMove","solution","realizado","san","esperado","replace","includes","setTimeout","opponentMove","oppGame","result","children","fileName","_jsxFileName","lineNumber","columnNumber","className","position","onPieceDrop","boardWidth","customDragLayer","boardOrientation","turnToPlay","_c","$RefreshReg$"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/components/Chessboard/Chessboard.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Chessboard } from 'react-chessboard';\r\nimport { Chess } from 'chess.js';\r\nimport { loadPuzzlesFromPGN } from '../../services/puzzleService';\r\nimport './Chessboard.css';\r\n\r\nconst ChessboardComponent = ({ onPuzzleMessage }) => {\r\n  const [game, setGame] = useState(new Chess());\r\n  const [currentPuzzle, setCurrentPuzzle] = useState(null);\r\n  const [solutionIndex, setSolutionIndex] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [selectedSquare, setSelectedSquare] = useState('');\r\n  const isFirstRender = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (isFirstRender.current) {\r\n      console.log('Primera carga del componente');\r\n      loadRandomPuzzle();\r\n      isFirstRender.current = false;\r\n    }\r\n  }, []);\r\n\r\n  const loadRandomPuzzle = async () => {\r\n    console.log('A. Iniciando carga de puzzle');\r\n    setIsLoading(true);\r\n    try {\r\n      const puzzles = await loadPuzzlesFromPGN();\r\n      console.log('B. Puzzles recibidos:', puzzles);\r\n\r\n      if (puzzles && puzzles.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * puzzles.length);\r\n        const puzzle = puzzles[randomIndex];\r\n        console.log('C. Puzzle seleccionado:', puzzle);\r\n\r\n        const newGame = new Chess(puzzle.fen);\r\n        console.log('D. Posición cargada:', newGame.fen());\r\n\r\n        setGame(newGame);\r\n        setCurrentPuzzle(puzzle);\r\n        setSolutionIndex(0);\r\n        setSelectedSquare(prev => prev + 1);\r\n        \r\n        onPuzzleMessage(`Tu turno - Encuentra el mate en 2`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error en loadRandomPuzzle:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const onDrop = (sourceSquare, targetSquare) => {\r\n    if (!game || isLoading) return false;\r\n\r\n    try {\r\n      const gameCopy = new Chess(game.fen());\r\n      const move = gameCopy.move({\r\n        from: sourceSquare,\r\n        to: targetSquare,\r\n        promotion: 'q'\r\n      });\r\n\r\n      if (move === null) return false;\r\n\r\n      // Convertir el movimiento a notación algebraica para comparar\r\n      const expectedMove = currentPuzzle.solution[solutionIndex];\r\n      console.log('Comparando movimientos:', {\r\n        realizado: move.san,\r\n        esperado: expectedMove\r\n      });\r\n\r\n      if (move.san === expectedMove.replace('#', '')) {\r\n        setGame(gameCopy);\r\n        onPuzzleMessage('¡Correcto! Espera la respuesta...');\r\n\r\n        // Si es mate, cargar nuevo puzzle\r\n        if (expectedMove.includes('#')) {\r\n          onPuzzleMessage('¡Excelente! ¡Mate! Cargando nuevo puzzle...');\r\n          setTimeout(loadRandomPuzzle, 1500);\r\n          return true;\r\n        }\r\n\r\n        // Respuesta del oponente\r\n        setTimeout(() => {\r\n          const opponentMove = currentPuzzle.solution[solutionIndex + 1];\r\n          if (!opponentMove) return;\r\n\r\n          const oppGame = new Chess(gameCopy.fen());\r\n          const result = oppGame.move(opponentMove);\r\n\r\n          if (result) {\r\n            setGame(oppGame);\r\n            setSolutionIndex(prev => prev + 2);\r\n            onPuzzleMessage('Tu turno - Continúa con el mate');\r\n          }\r\n        }, 500);\r\n\r\n        return true;\r\n      }\r\n\r\n      onPuzzleMessage('Movimiento incorrecto. Intenta de nuevo');\r\n      return false;\r\n\r\n    } catch (error) {\r\n      console.error('Error al mover:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  if (isLoading || !game) {\r\n    return <div>Cargando puzzle...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"chessboard-container\">\r\n      <div className=\"board-wrapper\">\r\n        {game && (\r\n          <Chessboard \r\n            key={selectedSquare}\r\n            position={game.fen()}\r\n            onPieceDrop={onDrop}\r\n            boardWidth={400}\r\n            customDragLayer={false}\r\n            boardOrientation={currentPuzzle?.turnToPlay === 'b' ? 'black' : 'white'}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessboardComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}