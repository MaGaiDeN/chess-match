{"ast":null,"code":"import { Chess } from 'chess.js';\nconst parsePGN = pgnText => {\n  try {\n    console.log('Iniciando parseo de PGN...');\n    const lines = pgnText.split('\\n');\n    const puzzles = [];\n    let currentPuzzle = {};\n    for (const line of lines) {\n      const trimmedLine = line.trim();\n      if (trimmedLine === '') {\n        if (currentPuzzle.event && currentPuzzle.fen && currentPuzzle.solution) {\n          puzzles.push({\n            ...currentPuzzle\n          });\n          currentPuzzle = {};\n        }\n        continue;\n      }\n      if (trimmedLine.startsWith('[Event ')) {\n        currentPuzzle.event = trimmedLine.match(/\"([^\"]+)\"/)[1];\n      } else if (trimmedLine.startsWith('[FEN ')) {\n        currentPuzzle.fen = trimmedLine.match(/\"([^\"]+)\"/)[1];\n      } else if (trimmedLine.startsWith('[Solution ')) {\n        // Extraer y procesar la solución\n        const solutionStr = trimmedLine.match(/\"([^\"]+)\"/)[1];\n        currentPuzzle.solution = solutionStr.split(' ');\n        currentPuzzle.id = puzzles.length + 1;\n        currentPuzzle.isMate = solutionStr.includes('#');\n      }\n    }\n\n    // Añadir el último puzzle si existe\n    if (currentPuzzle.event && currentPuzzle.fen && currentPuzzle.solution) {\n      puzzles.push({\n        ...currentPuzzle\n      });\n    }\n    console.log('Puzzles parseados:', puzzles);\n    return puzzles;\n  } catch (error) {\n    console.error('Error parseando PGN:', error);\n    return [];\n  }\n};\nexport const loadPuzzlesFromPGN = async () => {\n  try {\n    console.log('Cargando archivo de puzzles...');\n    const puzzlePath = process.env.PUBLIC_URL + '/data/puzzles/mate-en-dos-processed.pgn';\n    const response = await fetch(puzzlePath);\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n    const pgnText = await response.text();\n    console.log('Contenido PGN cargado:', pgnText.length, 'bytes');\n    const puzzles = parsePGN(pgnText);\n    console.log('Puzzles antes de validación:', puzzles);\n\n    // Validar cada puzzle\n    const validPuzzles = puzzles.filter(puzzle => {\n      if (!puzzle.fen || !puzzle.solution) {\n        console.error('Puzzle incompleto:', puzzle);\n        return false;\n      }\n      try {\n        const chess = new Chess();\n        const isValid = chess.load(puzzle.fen);\n        console.log('Validando FEN:', {\n          puzzle: puzzle.event,\n          fen: puzzle.fen,\n          isValid\n        });\n        return isValid;\n      } catch (error) {\n        console.error('Error validando puzzle:', puzzle, error);\n        return false;\n      }\n    });\n    console.log('Puzzles válidos encontrados:', validPuzzles.length);\n    return validPuzzles;\n  } catch (error) {\n    console.error('Error cargando puzzles:', error);\n    return [];\n  }\n};\nexport const getRandomPuzzle = puzzles => {\n  if (!puzzles || puzzles.length === 0) {\n    console.error('No hay puzzles disponibles');\n    return null;\n  }\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\n  const selectedPuzzle = puzzles[randomIndex];\n  console.log('Puzzle seleccionado:', selectedPuzzle);\n  return selectedPuzzle;\n};","map":{"version":3,"names":["Chess","parsePGN","pgnText","console","log","lines","split","puzzles","currentPuzzle","line","trimmedLine","trim","event","fen","solution","push","startsWith","match","solutionStr","id","length","isMate","includes","error","loadPuzzlesFromPGN","puzzlePath","process","env","PUBLIC_URL","response","fetch","ok","Error","status","text","validPuzzles","filter","puzzle","chess","isValid","load","getRandomPuzzle","randomIndex","Math","floor","random","selectedPuzzle"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/services/puzzleService.js"],"sourcesContent":["import { Chess } from 'chess.js';\r\n\r\nconst parsePGN = (pgnText) => {\r\n  try {\r\n    console.log('Iniciando parseo de PGN...');\r\n    const lines = pgnText.split('\\n');\r\n    const puzzles = [];\r\n    let currentPuzzle = {};\r\n\r\n    for (const line of lines) {\r\n      const trimmedLine = line.trim();\r\n      \r\n      if (trimmedLine === '') {\r\n        if (currentPuzzle.event && currentPuzzle.fen && currentPuzzle.solution) {\r\n          puzzles.push({...currentPuzzle});\r\n          currentPuzzle = {};\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (trimmedLine.startsWith('[Event ')) {\r\n        currentPuzzle.event = trimmedLine.match(/\"([^\"]+)\"/)[1];\r\n      } else if (trimmedLine.startsWith('[FEN ')) {\r\n        currentPuzzle.fen = trimmedLine.match(/\"([^\"]+)\"/)[1];\r\n      } else if (trimmedLine.startsWith('[Solution ')) {\r\n        // Extraer y procesar la solución\r\n        const solutionStr = trimmedLine.match(/\"([^\"]+)\"/)[1];\r\n        currentPuzzle.solution = solutionStr.split(' ');\r\n        currentPuzzle.id = puzzles.length + 1;\r\n        currentPuzzle.isMate = solutionStr.includes('#');\r\n      }\r\n    }\r\n\r\n    // Añadir el último puzzle si existe\r\n    if (currentPuzzle.event && currentPuzzle.fen && currentPuzzle.solution) {\r\n      puzzles.push({...currentPuzzle});\r\n    }\r\n\r\n    console.log('Puzzles parseados:', puzzles);\r\n    return puzzles;\r\n  } catch (error) {\r\n    console.error('Error parseando PGN:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const loadPuzzlesFromPGN = async () => {\r\n  try {\r\n    console.log('Cargando archivo de puzzles...');\r\n    const puzzlePath = process.env.PUBLIC_URL + '/data/puzzles/mate-en-dos-processed.pgn';\r\n    \r\n    const response = await fetch(puzzlePath);\r\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n    \r\n    const pgnText = await response.text();\r\n    console.log('Contenido PGN cargado:', pgnText.length, 'bytes');\r\n    \r\n    const puzzles = parsePGN(pgnText);\r\n    console.log('Puzzles antes de validación:', puzzles);\r\n    \r\n    // Validar cada puzzle\r\n    const validPuzzles = puzzles.filter(puzzle => {\r\n      if (!puzzle.fen || !puzzle.solution) {\r\n        console.error('Puzzle incompleto:', puzzle);\r\n        return false;\r\n      }\r\n      \r\n      try {\r\n        const chess = new Chess();\r\n        const isValid = chess.load(puzzle.fen);\r\n        console.log('Validando FEN:', {\r\n          puzzle: puzzle.event,\r\n          fen: puzzle.fen,\r\n          isValid\r\n        });\r\n        return isValid;\r\n      } catch (error) {\r\n        console.error('Error validando puzzle:', puzzle, error);\r\n        return false;\r\n      }\r\n    });\r\n\r\n    console.log('Puzzles válidos encontrados:', validPuzzles.length);\r\n    return validPuzzles;\r\n  } catch (error) {\r\n    console.error('Error cargando puzzles:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getRandomPuzzle = (puzzles) => {\r\n  if (!puzzles || puzzles.length === 0) {\r\n    console.error('No hay puzzles disponibles');\r\n    return null;\r\n  }\r\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\r\n  const selectedPuzzle = puzzles[randomIndex];\r\n  console.log('Puzzle seleccionado:', selectedPuzzle);\r\n  return selectedPuzzle;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}