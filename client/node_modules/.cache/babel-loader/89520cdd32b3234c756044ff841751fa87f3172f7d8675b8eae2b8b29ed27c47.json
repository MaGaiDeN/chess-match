{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\magai\\\\Desktop\\\\chess-match\\\\client\\\\src\\\\components\\\\Chessboard\\\\Chessboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport { loadPuzzles, getRandomPuzzle } from '../../services/puzzleService';\nimport './Chessboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessboardComponent = ({\n  onPuzzleMessage\n}) => {\n  _s();\n  const [game, setGame] = useState(null);\n  const [currentPuzzle, setCurrentPuzzle] = useState(null);\n  const [solutionIndex, setSolutionIndex] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [boardKey, setBoardKey] = useState(0);\n  const isFirstRender = useRef(true);\n  useEffect(() => {\n    if (isFirstRender.current) {\n      console.log('Primera carga del componente');\n      loadRandomPuzzle();\n      isFirstRender.current = false;\n    }\n  }, []);\n  const loadRandomPuzzle = async () => {\n    console.log('A. Iniciando carga de puzzle');\n    setIsLoading(true);\n    try {\n      const puzzles = await loadPuzzles();\n      console.log('B. Puzzles recibidos:', puzzles);\n      if (puzzles && puzzles.length > 0) {\n        const puzzle = getRandomPuzzle(puzzles);\n        console.log('C. Puzzle seleccionado:', puzzle);\n        if (!puzzle) {\n          console.error('D. Error: No se pudo cargar el puzzle');\n          return;\n        }\n        const newGame = new Chess();\n        const success = newGame.load(puzzle.initialPosition);\n        console.log('E. Cargando posición inicial:', success);\n        if (!success) {\n          console.error('Error al cargar la posición:', puzzle.initialPosition);\n          return;\n        }\n        setGame(newGame);\n        setCurrentPuzzle(puzzle);\n        setSolutionIndex(0);\n        setBoardKey(prev => prev + 1);\n        const movesForMate = Math.ceil(puzzle.solution.length / 2);\n        onPuzzleMessage(`Tu turno - Encuentra el mate en ${movesForMate}`);\n      }\n    } catch (error) {\n      console.error('H. Error en loadRandomPuzzle:', error);\n    } finally {\n      console.log('I. Finalizando carga');\n      setIsLoading(false);\n    }\n  };\n  const onDrop = (sourceSquare, targetSquare) => {\n    if (!game || isLoading) return false;\n    try {\n      const move = game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: 'q'\n      });\n      if (move === null) return false;\n      if (currentPuzzle && currentPuzzle.solution[solutionIndex] === move.san) {\n        onPuzzleMessage('¡Correcto! Espera la respuesta...');\n        setTimeout(() => {\n          const opponentMove = currentPuzzle.solution[solutionIndex + 1];\n          game.move(opponentMove);\n          setGame(new Chess(game.fen()));\n          setBoardKey(prev => prev + 1);\n          setSolutionIndex(solutionIndex + 2);\n          if (solutionIndex + 2 >= currentPuzzle.solution.length) {\n            onPuzzleMessage('¡Puzzle completado! Cargando nuevo puzzle...');\n            setTimeout(loadRandomPuzzle, 2000);\n          } else {\n            onPuzzleMessage('Tu turno - Continúa con el mate');\n          }\n        }, 500);\n      } else {\n        game.undo();\n        onPuzzleMessage('Movimiento incorrecto. Intenta de nuevo');\n        return false;\n      }\n      return true;\n    } catch (error) {\n      console.error('Error al mover:', error);\n      return false;\n    }\n  };\n  if (isLoading || !game) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando puzzle...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardWidth: 400,\n        customDragLayer: false,\n        boardOrientation: (currentPuzzle === null || currentPuzzle === void 0 ? void 0 : currentPuzzle.turnToPlay) === 'b' ? 'black' : 'white'\n      }, boardKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessboardComponent, \"3Dj7evVaq9NdUVBrg8mKMJsEqEc=\");\n_c = ChessboardComponent;\nexport default ChessboardComponent;\nvar _c;\n$RefreshReg$(_c, \"ChessboardComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Chessboard","Chess","loadPuzzles","getRandomPuzzle","jsxDEV","_jsxDEV","ChessboardComponent","onPuzzleMessage","_s","game","setGame","currentPuzzle","setCurrentPuzzle","solutionIndex","setSolutionIndex","isLoading","setIsLoading","boardKey","setBoardKey","isFirstRender","current","console","log","loadRandomPuzzle","puzzles","length","puzzle","error","newGame","success","load","initialPosition","prev","movesForMate","Math","ceil","solution","onDrop","sourceSquare","targetSquare","move","from","to","promotion","san","setTimeout","opponentMove","fen","undo","children","fileName","_jsxFileName","lineNumber","columnNumber","className","position","onPieceDrop","boardWidth","customDragLayer","boardOrientation","turnToPlay","_c","$RefreshReg$"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/components/Chessboard/Chessboard.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Chessboard } from 'react-chessboard';\r\nimport { Chess } from 'chess.js';\r\nimport { loadPuzzles, getRandomPuzzle } from '../../services/puzzleService';\r\nimport './Chessboard.css';\r\n\r\nconst ChessboardComponent = ({ onPuzzleMessage }) => {\r\n  const [game, setGame] = useState(null);\r\n  const [currentPuzzle, setCurrentPuzzle] = useState(null);\r\n  const [solutionIndex, setSolutionIndex] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [boardKey, setBoardKey] = useState(0);\r\n  const isFirstRender = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (isFirstRender.current) {\r\n      console.log('Primera carga del componente');\r\n      loadRandomPuzzle();\r\n      isFirstRender.current = false;\r\n    }\r\n  }, []);\r\n\r\n  const loadRandomPuzzle = async () => {\r\n    console.log('A. Iniciando carga de puzzle');\r\n    setIsLoading(true);\r\n    try {\r\n      const puzzles = await loadPuzzles();\r\n      console.log('B. Puzzles recibidos:', puzzles);\r\n\r\n      if (puzzles && puzzles.length > 0) {\r\n        const puzzle = getRandomPuzzle(puzzles);\r\n        console.log('C. Puzzle seleccionado:', puzzle);\r\n\r\n        if (!puzzle) {\r\n          console.error('D. Error: No se pudo cargar el puzzle');\r\n          return;\r\n        }\r\n\r\n        const newGame = new Chess();\r\n        const success = newGame.load(puzzle.initialPosition);\r\n        console.log('E. Cargando posición inicial:', success);\r\n        \r\n        if (!success) {\r\n          console.error('Error al cargar la posición:', puzzle.initialPosition);\r\n          return;\r\n        }\r\n\r\n        setGame(newGame);\r\n        setCurrentPuzzle(puzzle);\r\n        setSolutionIndex(0);\r\n        setBoardKey(prev => prev + 1);\r\n        \r\n        const movesForMate = Math.ceil(puzzle.solution.length / 2);\r\n        onPuzzleMessage(`Tu turno - Encuentra el mate en ${movesForMate}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('H. Error en loadRandomPuzzle:', error);\r\n    } finally {\r\n      console.log('I. Finalizando carga');\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const onDrop = (sourceSquare, targetSquare) => {\r\n    if (!game || isLoading) return false;\r\n\r\n    try {\r\n      const move = game.move({\r\n        from: sourceSquare,\r\n        to: targetSquare,\r\n        promotion: 'q'\r\n      });\r\n\r\n      if (move === null) return false;\r\n\r\n      if (currentPuzzle && currentPuzzle.solution[solutionIndex] === move.san) {\r\n        onPuzzleMessage('¡Correcto! Espera la respuesta...');\r\n        \r\n        setTimeout(() => {\r\n          const opponentMove = currentPuzzle.solution[solutionIndex + 1];\r\n          game.move(opponentMove);\r\n          setGame(new Chess(game.fen()));\r\n          setBoardKey(prev => prev + 1);\r\n          setSolutionIndex(solutionIndex + 2);\r\n\r\n          if (solutionIndex + 2 >= currentPuzzle.solution.length) {\r\n            onPuzzleMessage('¡Puzzle completado! Cargando nuevo puzzle...');\r\n            setTimeout(loadRandomPuzzle, 2000);\r\n          } else {\r\n            onPuzzleMessage('Tu turno - Continúa con el mate');\r\n          }\r\n        }, 500);\r\n      } else {\r\n        game.undo();\r\n        onPuzzleMessage('Movimiento incorrecto. Intenta de nuevo');\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error al mover:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  if (isLoading || !game) {\r\n    return <div>Cargando puzzle...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"chessboard-container\">\r\n      <div className=\"board-wrapper\">\r\n        <Chessboard \r\n          key={boardKey}\r\n          position={game.fen()}\r\n          onPieceDrop={onDrop}\r\n          boardWidth={400}\r\n          customDragLayer={false}\r\n          boardOrientation={currentPuzzle?.turnToPlay === 'b' ? 'black' : 'white'}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessboardComponent; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}