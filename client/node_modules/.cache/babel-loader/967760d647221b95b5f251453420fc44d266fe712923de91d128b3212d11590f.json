{"ast":null,"code":"import { Chess } from 'chess.js';\nconst parsePGN = pgnText => {\n  const puzzles = [];\n  console.log('Iniciando procesamiento de PGN...');\n\n  // Dividir por puzzles (dos saltos de línea)\n  const games = pgnText.split('\\n\\n[Event');\n  console.log(`Encontrados ${games.length} puzzles para procesar`);\n  games.forEach((game, index) => {\n    try {\n      // Añadir [Event de vuelta al inicio si no es el primer puzzle\n      const puzzleText = index === 0 ? game : '[Event' + game;\n\n      // Extraer datos usando expresiones regulares\n      const eventMatch = puzzleText.match(/\\[Event \"([^\"]+)\"\\]/);\n      const fenMatch = puzzleText.match(/\\[FEN \"([^\"]+)\"\\]/);\n      const solutionMatch = puzzleText.match(/\\[Solution \"([^\"]+)\"\\]/);\n      if (eventMatch && fenMatch && solutionMatch) {\n        const event = eventMatch[1];\n        const fen = fenMatch[1].trim();\n        const solutionText = solutionMatch[1];\n        console.log(`Procesando puzzle ${index + 1}:`, {\n          event,\n          fen,\n          solution: solutionText\n        });\n\n        // Procesar la solución\n        const solution = solutionText.split(' ').map(move => move.endsWith('#') ? move.slice(0, -1) : move);\n\n        // Verificar FEN\n        try {\n          const chess = new Chess();\n\n          // Intentar cargar el FEN\n          if (chess.load(fen)) {\n            const puzzle = {\n              id: index + 1,\n              event: event,\n              fen: fen,\n              solution: solution,\n              isMate: true,\n              turnToPlay: fen.includes(' w ') ? 'w' : 'b'\n            };\n\n            // Verificar que el FEN es válido intentando hacer un movimiento\n            const testMove = chess.move(solution[0], {\n              sloppy: true\n            });\n            if (testMove) {\n              puzzles.push(puzzle);\n              console.log(`Puzzle ${index + 1} procesado correctamente:`, puzzle);\n            } else {\n              console.error(`Movimiento inválido en puzzle ${index + 1}:`, solution[0]);\n            }\n          } else {\n            console.error(`FEN rechazado por chess.js en puzzle ${index + 1}:`, fen);\n          }\n        } catch (error) {\n          console.error(`Error al validar FEN en puzzle ${index + 1}:`, error.message);\n        }\n      } else {\n        console.error(`Datos faltantes en puzzle ${index + 1}:`, {\n          event: !!eventMatch,\n          fen: !!fenMatch,\n          solution: !!solutionMatch\n        });\n      }\n    } catch (error) {\n      console.error(`Error al procesar puzzle ${index + 1}:`, error);\n    }\n  });\n  return puzzles;\n};\nexport const loadPuzzlesFromPGN = async () => {\n  try {\n    console.log('Cargando archivo de puzzles...');\n    const puzzlePath = process.env.PUBLIC_URL + '/data/puzzles/mate-en-dos-processed.pgn';\n    console.log('Intentando cargar puzzles desde:', puzzlePath);\n    const response = await fetch(puzzlePath);\n    if (!response.ok) {\n      console.error('Error HTTP:', response.status, response.statusText);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const pgnText = await response.text();\n    console.log('Archivo PGN cargado, tamaño:', pgnText.length, 'bytes');\n    console.log('Contenido del archivo:', pgnText);\n\n    // Limpiar posibles caracteres especiales o BOM\n    const cleanPgnText = pgnText.trim().replace(/^\\uFEFF/, '');\n    const puzzles = parsePGN(cleanPgnText);\n    console.log(`${puzzles.length} puzzles procesados correctamente:`, puzzles);\n    return puzzles;\n  } catch (error) {\n    console.error('Error loading puzzles:', error);\n    return [];\n  }\n};\nexport const getRandomPuzzle = puzzles => {\n  if (!puzzles || puzzles.length === 0) {\n    console.error('No hay puzzles disponibles');\n    return null;\n  }\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\n  const selectedPuzzle = puzzles[randomIndex];\n  console.log('Puzzle seleccionado:', selectedPuzzle);\n  return selectedPuzzle;\n};","map":{"version":3,"names":["Chess","parsePGN","pgnText","puzzles","console","log","games","split","length","forEach","game","index","puzzleText","eventMatch","match","fenMatch","solutionMatch","event","fen","trim","solutionText","solution","map","move","endsWith","slice","chess","load","puzzle","id","isMate","turnToPlay","includes","testMove","sloppy","push","error","message","loadPuzzlesFromPGN","puzzlePath","process","env","PUBLIC_URL","response","fetch","ok","status","statusText","Error","text","cleanPgnText","replace","getRandomPuzzle","randomIndex","Math","floor","random","selectedPuzzle"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/services/puzzleService.js"],"sourcesContent":["import { Chess } from 'chess.js';\r\n\r\nconst parsePGN = (pgnText) => {\r\n  const puzzles = [];\r\n  console.log('Iniciando procesamiento de PGN...');\r\n  \r\n  // Dividir por puzzles (dos saltos de línea)\r\n  const games = pgnText.split('\\n\\n[Event');\r\n  console.log(`Encontrados ${games.length} puzzles para procesar`);\r\n  \r\n  games.forEach((game, index) => {\r\n    try {\r\n      // Añadir [Event de vuelta al inicio si no es el primer puzzle\r\n      const puzzleText = index === 0 ? game : '[Event' + game;\r\n      \r\n      // Extraer datos usando expresiones regulares\r\n      const eventMatch = puzzleText.match(/\\[Event \"([^\"]+)\"\\]/);\r\n      const fenMatch = puzzleText.match(/\\[FEN \"([^\"]+)\"\\]/);\r\n      const solutionMatch = puzzleText.match(/\\[Solution \"([^\"]+)\"\\]/);\r\n      \r\n      if (eventMatch && fenMatch && solutionMatch) {\r\n        const event = eventMatch[1];\r\n        const fen = fenMatch[1].trim();\r\n        const solutionText = solutionMatch[1];\r\n        \r\n        console.log(`Procesando puzzle ${index + 1}:`, {\r\n          event,\r\n          fen,\r\n          solution: solutionText\r\n        });\r\n        \r\n        // Procesar la solución\r\n        const solution = solutionText\r\n          .split(' ')\r\n          .map(move => move.endsWith('#') ? move.slice(0, -1) : move);\r\n        \r\n        // Verificar FEN\r\n        try {\r\n          const chess = new Chess();\r\n          \r\n          // Intentar cargar el FEN\r\n          if (chess.load(fen)) {\r\n            const puzzle = {\r\n              id: index + 1,\r\n              event: event,\r\n              fen: fen,\r\n              solution: solution,\r\n              isMate: true,\r\n              turnToPlay: fen.includes(' w ') ? 'w' : 'b'\r\n            };\r\n            \r\n            // Verificar que el FEN es válido intentando hacer un movimiento\r\n            const testMove = chess.move(solution[0], { sloppy: true });\r\n            if (testMove) {\r\n              puzzles.push(puzzle);\r\n              console.log(`Puzzle ${index + 1} procesado correctamente:`, puzzle);\r\n            } else {\r\n              console.error(`Movimiento inválido en puzzle ${index + 1}:`, solution[0]);\r\n            }\r\n          } else {\r\n            console.error(`FEN rechazado por chess.js en puzzle ${index + 1}:`, fen);\r\n          }\r\n        } catch (error) {\r\n          console.error(`Error al validar FEN en puzzle ${index + 1}:`, error.message);\r\n        }\r\n      } else {\r\n        console.error(`Datos faltantes en puzzle ${index + 1}:`, {\r\n          event: !!eventMatch,\r\n          fen: !!fenMatch,\r\n          solution: !!solutionMatch\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error al procesar puzzle ${index + 1}:`, error);\r\n    }\r\n  });\r\n  \r\n  return puzzles;\r\n};\r\n\r\nexport const loadPuzzlesFromPGN = async () => {\r\n  try {\r\n    console.log('Cargando archivo de puzzles...');\r\n    const puzzlePath = process.env.PUBLIC_URL + '/data/puzzles/mate-en-dos-processed.pgn';\r\n    console.log('Intentando cargar puzzles desde:', puzzlePath);\r\n    \r\n    const response = await fetch(puzzlePath);\r\n    \r\n    if (!response.ok) {\r\n      console.error('Error HTTP:', response.status, response.statusText);\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const pgnText = await response.text();\r\n    console.log('Archivo PGN cargado, tamaño:', pgnText.length, 'bytes');\r\n    console.log('Contenido del archivo:', pgnText);\r\n    \r\n    // Limpiar posibles caracteres especiales o BOM\r\n    const cleanPgnText = pgnText.trim().replace(/^\\uFEFF/, '');\r\n    \r\n    const puzzles = parsePGN(cleanPgnText);\r\n    console.log(`${puzzles.length} puzzles procesados correctamente:`, puzzles);\r\n    \r\n    return puzzles;\r\n  } catch (error) {\r\n    console.error('Error loading puzzles:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getRandomPuzzle = (puzzles) => {\r\n  if (!puzzles || puzzles.length === 0) {\r\n    console.error('No hay puzzles disponibles');\r\n    return null;\r\n  }\r\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\r\n  const selectedPuzzle = puzzles[randomIndex];\r\n  console.log('Puzzle seleccionado:', selectedPuzzle);\r\n  return selectedPuzzle;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}