{"ast":null,"code":"import { Chess } from 'chess.js';\nconst validateFEN = fen => {\n  try {\n    const chess = new Chess();\n    return chess.load(fen);\n  } catch (error) {\n    console.error('Error validando FEN:', error);\n    return false;\n  }\n};\nconst parsePGN = pgnText => {\n  const puzzles = [];\n  console.log('Iniciando procesamiento de PGN...');\n  const games = pgnText.split('\\n\\n[Event');\n  console.log(`Encontrados ${games.length} puzzles para procesar`);\n  games.forEach((game, index) => {\n    try {\n      const puzzleText = index === 0 ? game : '[Event' + game;\n      const eventMatch = puzzleText.match(/\\[Event \"([^\"]+)\"\\]/);\n      const fenMatch = puzzleText.match(/\\[FEN \"([^\"]+)\"\\]/);\n      const solutionMatch = puzzleText.match(/\\[Solution \"([^\"]+)\"\\]/);\n      if (eventMatch && fenMatch && solutionMatch) {\n        const event = eventMatch[1];\n        const fen = fenMatch[1].trim();\n        const solutionText = solutionMatch[1];\n        const solution = solutionText.split(' ');\n        if (validateFEN(fen)) {\n          const puzzle = {\n            id: index + 1,\n            event: event,\n            fen: fen,\n            solution: solution,\n            isMate: solutionText.includes('#'),\n            turnToPlay: fen.includes(' w ') ? 'w' : 'b'\n          };\n          puzzles.push(puzzle);\n          console.log(`Puzzle ${index + 1} procesado correctamente:`, puzzle);\n        }\n      }\n    } catch (error) {\n      console.error(`Error al procesar puzzle ${index + 1}:`, error);\n    }\n  });\n  return puzzles;\n};\nexport const loadPuzzlesFromPGN = async () => {\n  try {\n    console.log('Cargando archivo de puzzles...');\n    const puzzlePath = process.env.PUBLIC_URL + '/data/puzzles/mate-en-dos-processed.pgn';\n    console.log('Intentando cargar puzzles desde:', puzzlePath);\n    const response = await fetch(puzzlePath);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const pgnText = await response.text();\n    console.log('Archivo PGN cargado, tamaño:', pgnText.length, 'bytes');\n    const cleanPgnText = pgnText.trim().replace(/^\\uFEFF/, '');\n    const puzzles = parsePGN(cleanPgnText);\n\n    // Validar FEN de cada puzzle\n    const validPuzzles = puzzles.filter(puzzle => {\n      try {\n        const chess = new Chess();\n        chess.load(puzzle.fen);\n        return true;\n      } catch (error) {\n        console.error('FEN inválido descartado:', puzzle.fen);\n        return false;\n      }\n    });\n    console.log('Puzzles válidos procesados:', validPuzzles.length);\n    return validPuzzles;\n  } catch (error) {\n    console.error('Error loading puzzles:', error);\n    return [];\n  }\n};\nexport const getRandomPuzzle = puzzles => {\n  if (!puzzles || puzzles.length === 0) {\n    console.error('No hay puzzles disponibles');\n    return null;\n  }\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\n  const selectedPuzzle = puzzles[randomIndex];\n  console.log('Puzzle seleccionado:', selectedPuzzle);\n  return selectedPuzzle;\n};","map":{"version":3,"names":["Chess","validateFEN","fen","chess","load","error","console","parsePGN","pgnText","puzzles","log","games","split","length","forEach","game","index","puzzleText","eventMatch","match","fenMatch","solutionMatch","event","trim","solutionText","solution","puzzle","id","isMate","includes","turnToPlay","push","loadPuzzlesFromPGN","puzzlePath","process","env","PUBLIC_URL","response","fetch","ok","Error","status","text","cleanPgnText","replace","validPuzzles","filter","getRandomPuzzle","randomIndex","Math","floor","random","selectedPuzzle"],"sources":["C:/Users/magai/Desktop/chess-match/client/src/services/puzzleService.js"],"sourcesContent":["import { Chess } from 'chess.js';\r\n\r\nconst validateFEN = (fen) => {\r\n  try {\r\n    const chess = new Chess();\r\n    return chess.load(fen);\r\n  } catch (error) {\r\n    console.error('Error validando FEN:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nconst parsePGN = (pgnText) => {\r\n  const puzzles = [];\r\n  console.log('Iniciando procesamiento de PGN...');\r\n  \r\n  const games = pgnText.split('\\n\\n[Event');\r\n  console.log(`Encontrados ${games.length} puzzles para procesar`);\r\n  \r\n  games.forEach((game, index) => {\r\n    try {\r\n      const puzzleText = index === 0 ? game : '[Event' + game;\r\n      \r\n      const eventMatch = puzzleText.match(/\\[Event \"([^\"]+)\"\\]/);\r\n      const fenMatch = puzzleText.match(/\\[FEN \"([^\"]+)\"\\]/);\r\n      const solutionMatch = puzzleText.match(/\\[Solution \"([^\"]+)\"\\]/);\r\n      \r\n      if (eventMatch && fenMatch && solutionMatch) {\r\n        const event = eventMatch[1];\r\n        const fen = fenMatch[1].trim();\r\n        const solutionText = solutionMatch[1];\r\n        \r\n        const solution = solutionText.split(' ');\r\n        \r\n        if (validateFEN(fen)) {\r\n          const puzzle = {\r\n            id: index + 1,\r\n            event: event,\r\n            fen: fen,\r\n            solution: solution,\r\n            isMate: solutionText.includes('#'),\r\n            turnToPlay: fen.includes(' w ') ? 'w' : 'b'\r\n          };\r\n          puzzles.push(puzzle);\r\n          console.log(`Puzzle ${index + 1} procesado correctamente:`, puzzle);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error al procesar puzzle ${index + 1}:`, error);\r\n    }\r\n  });\r\n  \r\n  return puzzles;\r\n};\r\n\r\nexport const loadPuzzlesFromPGN = async () => {\r\n  try {\r\n    console.log('Cargando archivo de puzzles...');\r\n    const puzzlePath = process.env.PUBLIC_URL + '/data/puzzles/mate-en-dos-processed.pgn';\r\n    console.log('Intentando cargar puzzles desde:', puzzlePath);\r\n    \r\n    const response = await fetch(puzzlePath);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const pgnText = await response.text();\r\n    console.log('Archivo PGN cargado, tamaño:', pgnText.length, 'bytes');\r\n    \r\n    const cleanPgnText = pgnText.trim().replace(/^\\uFEFF/, '');\r\n    const puzzles = parsePGN(cleanPgnText);\r\n    \r\n    // Validar FEN de cada puzzle\r\n    const validPuzzles = puzzles.filter(puzzle => {\r\n      try {\r\n        const chess = new Chess();\r\n        chess.load(puzzle.fen);\r\n        return true;\r\n      } catch (error) {\r\n        console.error('FEN inválido descartado:', puzzle.fen);\r\n        return false;\r\n      }\r\n    });\r\n\r\n    console.log('Puzzles válidos procesados:', validPuzzles.length);\r\n    return validPuzzles;\r\n  } catch (error) {\r\n    console.error('Error loading puzzles:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getRandomPuzzle = (puzzles) => {\r\n  if (!puzzles || puzzles.length === 0) {\r\n    console.error('No hay puzzles disponibles');\r\n    return null;\r\n  }\r\n  const randomIndex = Math.floor(Math.random() * puzzles.length);\r\n  const selectedPuzzle = puzzles[randomIndex];\r\n  console.log('Puzzle seleccionado:', selectedPuzzle);\r\n  return selectedPuzzle;\r\n};"],"mappings":"AAAA,SAASA,KAAK,QAAQ,UAAU;AAEhC,MAAMC,WAAW,GAAIC,GAAG,IAAK;EAC3B,IAAI;IACF,MAAMC,KAAK,GAAG,IAAIH,KAAK,CAAC,CAAC;IACzB,OAAOG,KAAK,CAACC,IAAI,CAACF,GAAG,CAAC;EACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,KAAK;EACd;AACF,CAAC;AAED,MAAME,QAAQ,GAAIC,OAAO,IAAK;EAC5B,MAAMC,OAAO,GAAG,EAAE;EAClBH,OAAO,CAACI,GAAG,CAAC,mCAAmC,CAAC;EAEhD,MAAMC,KAAK,GAAGH,OAAO,CAACI,KAAK,CAAC,YAAY,CAAC;EACzCN,OAAO,CAACI,GAAG,CAAC,eAAeC,KAAK,CAACE,MAAM,wBAAwB,CAAC;EAEhEF,KAAK,CAACG,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC7B,IAAI;MACF,MAAMC,UAAU,GAAGD,KAAK,KAAK,CAAC,GAAGD,IAAI,GAAG,QAAQ,GAAGA,IAAI;MAEvD,MAAMG,UAAU,GAAGD,UAAU,CAACE,KAAK,CAAC,qBAAqB,CAAC;MAC1D,MAAMC,QAAQ,GAAGH,UAAU,CAACE,KAAK,CAAC,mBAAmB,CAAC;MACtD,MAAME,aAAa,GAAGJ,UAAU,CAACE,KAAK,CAAC,wBAAwB,CAAC;MAEhE,IAAID,UAAU,IAAIE,QAAQ,IAAIC,aAAa,EAAE;QAC3C,MAAMC,KAAK,GAAGJ,UAAU,CAAC,CAAC,CAAC;QAC3B,MAAMhB,GAAG,GAAGkB,QAAQ,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC;QAC9B,MAAMC,YAAY,GAAGH,aAAa,CAAC,CAAC,CAAC;QAErC,MAAMI,QAAQ,GAAGD,YAAY,CAACZ,KAAK,CAAC,GAAG,CAAC;QAExC,IAAIX,WAAW,CAACC,GAAG,CAAC,EAAE;UACpB,MAAMwB,MAAM,GAAG;YACbC,EAAE,EAAEX,KAAK,GAAG,CAAC;YACbM,KAAK,EAAEA,KAAK;YACZpB,GAAG,EAAEA,GAAG;YACRuB,QAAQ,EAAEA,QAAQ;YAClBG,MAAM,EAAEJ,YAAY,CAACK,QAAQ,CAAC,GAAG,CAAC;YAClCC,UAAU,EAAE5B,GAAG,CAAC2B,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG;UAC1C,CAAC;UACDpB,OAAO,CAACsB,IAAI,CAACL,MAAM,CAAC;UACpBpB,OAAO,CAACI,GAAG,CAAC,UAAUM,KAAK,GAAG,CAAC,2BAA2B,EAAEU,MAAM,CAAC;QACrE;MACF;IACF,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4BW,KAAK,GAAG,CAAC,GAAG,EAAEX,KAAK,CAAC;IAChE;EACF,CAAC,CAAC;EAEF,OAAOI,OAAO;AAChB,CAAC;AAED,OAAO,MAAMuB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACF1B,OAAO,CAACI,GAAG,CAAC,gCAAgC,CAAC;IAC7C,MAAMuB,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,GAAG,yCAAyC;IACrF9B,OAAO,CAACI,GAAG,CAAC,kCAAkC,EAAEuB,UAAU,CAAC;IAE3D,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACL,UAAU,CAAC;IAExC,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMjC,OAAO,GAAG,MAAM6B,QAAQ,CAACK,IAAI,CAAC,CAAC;IACrCpC,OAAO,CAACI,GAAG,CAAC,8BAA8B,EAAEF,OAAO,CAACK,MAAM,EAAE,OAAO,CAAC;IAEpE,MAAM8B,YAAY,GAAGnC,OAAO,CAACe,IAAI,CAAC,CAAC,CAACqB,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IAC1D,MAAMnC,OAAO,GAAGF,QAAQ,CAACoC,YAAY,CAAC;;IAEtC;IACA,MAAME,YAAY,GAAGpC,OAAO,CAACqC,MAAM,CAACpB,MAAM,IAAI;MAC5C,IAAI;QACF,MAAMvB,KAAK,GAAG,IAAIH,KAAK,CAAC,CAAC;QACzBG,KAAK,CAACC,IAAI,CAACsB,MAAM,CAACxB,GAAG,CAAC;QACtB,OAAO,IAAI;MACb,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEqB,MAAM,CAACxB,GAAG,CAAC;QACrD,OAAO,KAAK;MACd;IACF,CAAC,CAAC;IAEFI,OAAO,CAACI,GAAG,CAAC,6BAA6B,EAAEmC,YAAY,CAAChC,MAAM,CAAC;IAC/D,OAAOgC,YAAY;EACrB,CAAC,CAAC,OAAOxC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAM0C,eAAe,GAAItC,OAAO,IAAK;EAC1C,IAAI,CAACA,OAAO,IAAIA,OAAO,CAACI,MAAM,KAAK,CAAC,EAAE;IACpCP,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAC;IAC3C,OAAO,IAAI;EACb;EACA,MAAM2C,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG1C,OAAO,CAACI,MAAM,CAAC;EAC9D,MAAMuC,cAAc,GAAG3C,OAAO,CAACuC,WAAW,CAAC;EAC3C1C,OAAO,CAACI,GAAG,CAAC,sBAAsB,EAAE0C,cAAc,CAAC;EACnD,OAAOA,cAAc;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}